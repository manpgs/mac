<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>man3pcap &mdash; macOS Manpages</title>
    <link rel="stylesheet" href="../style.css">
  </head>
  <body>
    <main>
      <h1><a href="../">macOS</a> &mdash; Packet Capture Functions</h1>
      <ul class="whatis">
        <li><a href="./pcap">pcap(3pcap)</a>              &mdash; Packet Capture library</li>
        <li><a href="./pcap_activate">pcap_activate(3pcap)</a>     &mdash; activate a capture handle</li>
        <li><a href="./pcap_breakloop">pcap_breakloop(3pcap)</a>    &mdash; force a pcap_dispatch() or pcap_loop() call to return</li>
        <li><a href="./pcap_can_set_rfmon">pcap_can_set_rfmon(3pcap)</a> &mdash; check whether monitor mode can be set for a not-yet-activated capture handle</li>
        <li><a href="./pcap_close">pcap_close(3pcap)</a>        &mdash; close a capture device or savefile</li>
        <li><a href="./pcap_compile">pcap_compile(3pcap)</a>      &mdash; compile a filter expression</li>
        <li><a href="./pcap_create">pcap_create(3pcap)</a>       &mdash; create a live capture handle</li>
        <li><a href="./pcap_datalink">pcap_datalink(3pcap)</a>     &mdash; get the link-layer header type</li>
        <li><a href="./pcap_datalink_name_to_val">pcap_datalink_name_to_val(3pcap)</a> &mdash; get the link-layer header type value corresponding to a header type name</li>
        <li><a href="./pcap_datalink_val_to_name">pcap_datalink_val_to_name(3pcap)</a>, <a href="./pcap_datalink_val_to_description">pcap_datalink_val_to_description(3pcap)</a>, <a href="./pcap_datalink_val_to_description_or_dlt">pcap_datalink_val_to_description_or_dlt(3pcap)</a> &mdash; get a name or description for a link-layer header type value</li>
        <li><a href="./pcap_dump">pcap_dump(3pcap)</a>         &mdash; write a packet to a capture file</li>
        <li><a href="./pcap_dump_close">pcap_dump_close(3pcap)</a>   &mdash; close a savefile being written to</li>
        <li><a href="./pcap_dump_file">pcap_dump_file(3pcap)</a>    &mdash; get the standard I/O stream for a savefile being written</li>
        <li><a href="./pcap_dump_flush">pcap_dump_flush(3pcap)</a>   &mdash; flush to a savefile packets dumped</li>
        <li><a href="./pcap_dump_ftell">pcap_dump_ftell(3pcap)</a>, <a href="./pcap_dump_ftell64">pcap_dump_ftell64(3pcap)</a> &mdash; get the current file offset for a savefile being written</li>
        <li><a href="./pcap_dump_open">pcap_dump_open(3pcap)</a>, <a href="./pcap_dump_open_append">pcap_dump_open_append(3pcap)</a>, <a href="./pcap_dump_fopen">pcap_dump_fopen(3pcap)</a> &mdash; open a file to which to write packets</li>
        <li><a href="./pcap_file">pcap_file(3pcap)</a>         &mdash; get the standard I/O stream for a savefile being read</li>
        <li><a href="./pcap_fileno">pcap_fileno(3pcap)</a>       &mdash; get the file descriptor for a live capture</li>
        <li><a href="./pcap_findalldevs">pcap_findalldevs(3pcap)</a>, <a href="./pcap_freealldevs">pcap_freealldevs(3pcap)</a> &mdash; get a list of capture devices, and free that list</li>
        <li><a href="./pcap_freecode">pcap_freecode(3pcap)</a>     &mdash; free a BPF program</li>
        <li><a href="./pcap_get_required_select_timeout">pcap_get_required_select_timeout(3pcap)</a> &mdash; get a timeout to be used when doing select() for a live capture</li>
        <li><a href="./pcap_get_selectable_fd">pcap_get_selectable_fd(3pcap)</a> &mdash; get a file descriptor on which a select() can be done for a live capture</li>
        <li><a href="./pcap_get_tstamp_precision">pcap_get_tstamp_precision(3pcap)</a> &mdash; get the time stamp precision returned in captures</li>
        <li><a href="./pcap_geterr">pcap_geterr(3pcap)</a>, <a href="./pcap_perror">pcap_perror(3pcap)</a> &mdash; get or print libpcap error message text</li>
        <li><a href="./pcap_init">pcap_init(3pcap)</a>         &mdash; initialize the library</li>
        <li><a href="./pcap_inject">pcap_inject(3pcap)</a>, <a href="./pcap_sendpacket">pcap_sendpacket(3pcap)</a> &mdash; transmit a packet</li>
        <li><a href="./pcap_is_swapped">pcap_is_swapped(3pcap)</a>   &mdash; find out whether a savefile has the native byte order</li>
        <li><a href="./pcap_lib_version">pcap_lib_version(3pcap)</a>  &mdash; get the version information for libpcap</li>
        <li><a href="./pcap_list_datalinks">pcap_list_datalinks(3pcap)</a>, <a href="./pcap_free_datalinks">pcap_free_datalinks(3pcap)</a> &mdash; get a list of link-layer header types supported by a capture device, and free that list</li>
        <li><a href="./pcap_list_tstamp_types">pcap_list_tstamp_types(3pcap)</a>, <a href="./pcap_free_tstamp_types">pcap_free_tstamp_types(3pcap)</a> &mdash; get a list of time stamp types supported by a capture device, and free that list</li>
        <li><a href="./pcap_lookupdev">pcap_lookupdev(3pcap)</a>    &mdash; find the default device on which to capture</li>
        <li><a href="./pcap_lookupnet">pcap_lookupnet(3pcap)</a>    &mdash; find the IPv4 network number and netmask for a device</li>
        <li><a href="./pcap_loop">pcap_loop(3pcap)</a>, <a href="./pcap_dispatch">pcap_dispatch(3pcap)</a> &mdash; process packets from a live capture or savefile</li>
        <li><a href="./pcap_major_version">pcap_major_version(3pcap)</a>, <a href="./pcap_minor_version">pcap_minor_version(3pcap)</a> &mdash; get the version number of a savefile</li>
        <li><a href="./pcap_next_ex">pcap_next_ex(3pcap)</a>, <a href="./pcap_next">pcap_next(3pcap)</a> &mdash; read the next packet from a pcap_t</li>
        <li><a href="./pcap_offline_filter">pcap_offline_filter(3pcap)</a> &mdash; check whether a filter matches a packet</li>
        <li><a href="./pcap_open_dead">pcap_open_dead(3pcap)</a>, <a href="./pcap_open_dead_with_tstamp_precision">pcap_open_dead_with_tstamp_precision(3pcap)</a> &mdash; open a fake pcap_t for compiling filters or opening a capture for output</li>
        <li><a href="./pcap_open_live">pcap_open_live(3pcap)</a>    &mdash; open a device for capturing</li>
        <li><a href="./pcap_open_offline">pcap_open_offline(3pcap)</a>, <a href="./pcap_open_offline_with_tstamp_precision">pcap_open_offline_with_tstamp_precision(3pcap)</a>, <a href="./pcap_fopen_offline">pcap_fopen_offline(3pcap)</a>, <a href="./pcap_fopen_offline_with_tstamp_precision">pcap_fopen_offline_with_tstamp_precision(3pcap)</a> &mdash; open a saved capture file for reading</li>
        <li><a href="./pcap_set_buffer_size">pcap_set_buffer_size(3pcap)</a> &mdash; set the buffer size for a not-yet-activated capture handle</li>
        <li><a href="./pcap_set_datalink">pcap_set_datalink(3pcap)</a> &mdash; set the link-layer header type to be used by a capture device</li>
        <li><a href="./pcap_set_immediate_mode">pcap_set_immediate_mode(3pcap)</a> &mdash; set immediate mode for a not-yet-activated capture handle</li>
        <li><a href="./pcap_set_promisc">pcap_set_promisc(3pcap)</a>  &mdash; set promiscuous mode for a not-yet-activated capture handle</li>
        <li><a href="./pcap_set_protocol_linux">pcap_set_protocol_linux(3pcap)</a> &mdash; set capture protocol for a not-yet-activated capture handle</li>
        <li><a href="./pcap_set_rfmon">pcap_set_rfmon(3pcap)</a>    &mdash; set monitor mode for a not-yet-activated capture handle</li>
        <li><a href="./pcap_set_snaplen">pcap_set_snaplen(3pcap)</a>  &mdash; set the snapshot length for a not-yet-activated capture handle</li>
        <li><a href="./pcap_set_timeout">pcap_set_timeout(3pcap)</a>  &mdash; set the packet buffer timeout for a not-yet-activated capture handle</li>
        <li><a href="./pcap_set_tstamp_precision">pcap_set_tstamp_precision(3pcap)</a> &mdash; set the time stamp precision returned in captures</li>
        <li><a href="./pcap_set_tstamp_type">pcap_set_tstamp_type(3pcap)</a> &mdash; set the time stamp type to be used by a capture device</li>
        <li><a href="./pcap_setdirection">pcap_setdirection(3pcap)</a> &mdash; set the direction for which packets will be captured</li>
        <li><a href="./pcap_setfilter">pcap_setfilter(3pcap)</a>    &mdash; set the filter</li>
        <li><a href="./pcap_setnonblock">pcap_setnonblock(3pcap)</a>, <a href="./pcap_getnonblock">pcap_getnonblock(3pcap)</a> &mdash; set or get the state of non-blocking mode on a capture device</li>
        <li><a href="./pcap_snapshot">pcap_snapshot(3pcap)</a>     &mdash; get the snapshot length</li>
        <li><a href="./pcap_stats">pcap_stats(3pcap)</a>        &mdash; get capture statistics</li>
        <li><a href="./pcap_statustostr">pcap_statustostr(3pcap)</a>  &mdash; convert a PCAP_ERROR_ or PCAP_WARNING_ value to a string</li>
        <li><a href="./pcap_strerror">pcap_strerror(3pcap)</a>     &mdash; convert an errno value to a string</li>
        <li><a href="./pcap_tstamp_type_name_to_val">pcap_tstamp_type_name_to_val(3pcap)</a> &mdash; get the time stamp type value corresponding to a time stamp type name</li>
        <li><a href="./pcap_tstamp_type_val_to_name">pcap_tstamp_type_val_to_name(3pcap)</a>, <a href="./pcap_tstamp_type_val_to_description">pcap_tstamp_type_val_to_description(3pcap)</a> &mdash; get a name or description for a time stamp type value</li>
      </ul>
    </main>
  </body>
</html>
