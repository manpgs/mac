<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>mann &middot; macOS</title>
    <link rel="stylesheet" href="../style.css">
  </head>
  <body>
    <header>
      <nav><a href="../" class="os">macOS</a><div class="section">mann</div></nav>
      <h1>Tcl/Tk Commands</h1>
    </header>
    <main>
      <table class="whatis">
        <thead><tr><th>Name</th><th>Summary</th></tr></thead>
        <tbody>
          <tr><td class="names"><a href="./Archetype">Archetype(n)</a>            </td><td class="summary">base class for all [incr Tk] mega-widgets</td></tr>
          <tr><td class="names"><a href="./Plotchart">Plotchart(n)</a>            </td><td class="summary">Simple plotting and charting package</td></tr>
          <tr><td class="names"><a href="./S3">S3(n)</a>                   </td><td class="summary">Amazon S3 Web Service Interface</td></tr>
          <tr><td class="names"><a href="./SASL">SASL(n)</a>                 </td><td class="summary">Implementation of SASL mechanisms for Tcl</td></tr>
          <tr><td class="names"><a href="./SafeBase">SafeBase(ntcl)</a>, <a href="./Safe%20Base">Safe Base(ntcl)</a></td><td class="summary">A mechanism for creating and manipulating safe interpreters</td></tr>
          <tr><td class="names"><a href="./Tcl">Tcl(ntcl)</a>               </td><td class="summary">Tool Command Language</td></tr>
          <tr><td class="names"><a href="./TclX">TclX(n)</a>                 </td><td class="summary">Extended Tcl: Extended command set for Tcl '</td></tr>
          <tr><td class="names"><a href="./Toplevel">Toplevel(n)</a>             </td><td class="summary">base class for mega-widgets in a top-level window</td></tr>
          <tr><td class="names"><a href="./Widget">Widget(n)</a>               </td><td class="summary">base class for mega-widgets within a frame</td></tr>
          <tr><td class="names"><a href="./adjust">adjust(n)</a>, <a href="./textutil::adjust">textutil::adjust(n)</a></td><td class="summary">Procedures to adjust, indent, and undent paragraphs</td></tr>
          <tr><td class="names"><a href="./adler">adler(n)</a>                </td><td class="summary">Message digest "adler"</td></tr>
          <tr><td class="names"><a href="./aes">aes(n)</a>                  </td><td class="summary">Implementation of the AES block cipher</td></tr>
          <tr><td class="names"><a href="./after">after(ntcl)</a>             </td><td class="summary">Execute a command after a time delay</td></tr>
          <tr><td class="names"><a href="./annealing">annealing(n)</a>, <a href="./simulation::annealing">simulation::annealing(n)</a></td><td class="summary">Simulated annealing</td></tr>
          <tr><td class="names"><a href="./ansi_cattr">ansi_cattr(n)</a>, <a href="./term::ansi::code::attr">term::ansi::code::attr(n)</a></td><td class="summary">ANSI attribute sequences</td></tr>
          <tr><td class="names"><a href="./ansi_cctrl">ansi_cctrl(n)</a>, <a href="./term::ansi::code::ctrl">term::ansi::code::ctrl(n)</a></td><td class="summary">ANSI control sequences</td></tr>
          <tr><td class="names"><a href="./ansi_cmacros">ansi_cmacros(n)</a>, <a href="./term::ansi::code::macros">term::ansi::code::macros(n)</a></td><td class="summary">Macro sequences</td></tr>
          <tr><td class="names"><a href="./ansi_code">ansi_code(n)</a>, <a href="./term::ansi::code">term::ansi::code(n)</a></td><td class="summary">Helper for control sequences</td></tr>
          <tr><td class="names"><a href="./ansi_ctrlu">ansi_ctrlu(n)</a>, <a href="./term::ansi::ctrl::unix">term::ansi::ctrl::unix(n)</a></td><td class="summary">Control operations and queries</td></tr>
          <tr><td class="names"><a href="./ansi_send">ansi_send(n)</a>, <a href="./term::ansi::send">term::ansi::send(n)</a></td><td class="summary">Output of ANSI control sequences to terminals</td></tr>
          <tr><td class="names"><a href="./append">append(ntcl)</a>            </td><td class="summary">Append to variable</td></tr>
          <tr><td class="names"><a href="./apply">apply(ntcl)</a>             </td><td class="summary">Apply an anonymous function</td></tr>
          <tr><td class="names"><a href="./array">array(ntcl)</a>             </td><td class="summary">Manipulate array variables</td></tr>
          <tr><td class="names"><a href="./ascii85">ascii85(n)</a>              </td><td class="summary">ascii85-encode/decode binary data</td></tr>
          <tr><td class="names"><a href="./asn">asn(n)</a>                  </td><td class="summary">ASN.1 BER encoder/decoder</td></tr>
          <tr><td class="names"><a href="./async">async(n)</a>, <a href="./cache::async">cache::async(n)</a></td><td class="summary">Asynchronous in-memory cache</td></tr>
          <tr><td class="names"><a href="./auto_execok">auto_execok(ntcl)</a>, <a href="./auto_import">auto_import(ntcl)</a>, <a href="./auto_load">auto_load(ntcl)</a>, <a href="./auto_mkindex">auto_mkindex(ntcl)</a>, <a href="./auto_mkindex_old">auto_mkindex_old(ntcl)</a>, <a href="./auto_qualify">auto_qualify(ntcl)</a>, <a href="./auto_reset">auto_reset(ntcl)</a>, <a href="./tcl_findLibrary">tcl_findLibrary(ntcl)</a>, <a href="./parray">parray(ntcl)</a>, <a href="./tcl_endOfWord">tcl_endOfWord(ntcl)</a>, <a href="./tcl_startOfNextWord">tcl_startOfNextWord(ntcl)</a>, <a href="./tcl_startOfPreviousWord">tcl_startOfPreviousWord(ntcl)</a>, <a href="./tcl_wordBreakAfter">tcl_wordBreakAfter(ntcl)</a>, <a href="./tcl_wordBreakBefore">tcl_wordBreakBefore(ntcl)</a></td><td class="summary">standard library of Tcl procedures</td></tr>
          <tr><td class="names"><a href="./autoproxy">autoproxy(n)</a>            </td><td class="summary">Automatic HTTP proxy usage and authentication</td></tr>
          <tr><td class="names"><a href="./autoscroll">autoscroll(n)</a>           </td><td class="summary">Provides for a scrollbar to automatically mapped and unmapped as needed</td></tr>
          <tr><td class="names"><a href="./base32">base32(n)</a>               </td><td class="summary">base32 standard encoding</td></tr>
          <tr><td class="names"><a href="./base32core">base32core(n)</a>, <a href="./base32::core">base32::core(n)</a></td><td class="summary">Expanding basic base32 maps</td></tr>
          <tr><td class="names"><a href="./base32hex">base32hex(n)</a>, <a href="./base32::hex">base32::hex(n)</a></td><td class="summary">base32 extended hex encoding</td></tr>
          <tr><td class="names"><a href="./base64">base64(n)</a>               </td><td class="summary">base64-encode/decode binary data</td></tr>
          <tr><td class="names"><a href="./bee">bee(n)</a>                  </td><td class="summary">BitTorrent Serialization Format Encoder/Decoder</td></tr>
          <tr><td class="names"><a href="./bell">bell(ntcl)</a>              </td><td class="summary">Ring a display's bell</td></tr>
          <tr><td class="names"><a href="./bgerror">bgerror(ntcl)</a>           </td><td class="summary">Command invoked to process background errors</td></tr>
          <tr><td class="names"><a href="./bibtex">bibtex(n)</a>               </td><td class="summary">Parse bibtex files</td></tr>
          <tr><td class="names"><a href="./bigfloat">bigfloat(n)</a>, <a href="./math::bigfloat">math::bigfloat(n)</a></td><td class="summary">Arbitrary precision floating-point numbers</td></tr>
          <tr><td class="names"><a href="./bignum">bignum(n)</a>, <a href="./math::bignum">math::bignum(n)</a></td><td class="summary">Arbitrary precision integer numbers</td></tr>
          <tr><td class="names"><a href="./bin">bin(n)</a>                  </td><td class="summary">Encoding "bin"</td></tr>
          <tr><td class="names"><a href="./binary">binary(ntcl)</a>            </td><td class="summary">Insert and extract fields from binary strings</td></tr>
          <tr><td class="names"><a href="./bind">bind(ntcl)</a>              </td><td class="summary">Arrange for X events to invoke Tcl scripts</td></tr>
          <tr><td class="names"><a href="./bindtags">bindtags(ntcl)</a>          </td><td class="summary">Determine which bindings apply to a window, and order of evaluation</td></tr>
          <tr><td class="names"><a href="./bitmap">bitmap(ntcl)</a>            </td><td class="summary">Images that display two colors</td></tr>
          <tr><td class="names"><a href="./blowfish">blowfish(n)</a>             </td><td class="summary">Implementation of the Blowfish block cipher</td></tr>
          <tr><td class="names"><a href="./body">body(n)</a>                 </td><td class="summary">change the body for a class method/proc</td></tr>
          <tr><td class="names"><a href="./break">break(ntcl)</a>             </td><td class="summary">Abort looping command</td></tr>
          <tr><td class="names"><a href="./button">button(ntcl)</a>            </td><td class="summary">Create and manipulate button widgets</td></tr>
          <tr><td class="names"><a href="./bz2">bz2(n)</a>                  </td><td class="summary">Data compression "bz2"</td></tr>
          <tr><td class="names"><a href="./calculus">calculus(n)</a>, <a href="./math::calculus">math::calculus(n)</a></td><td class="summary">Integration and ordinary differential equations</td></tr>
          <tr><td class="names"><a href="./canvas">canvas(ntcl)</a>            </td><td class="summary">Create and manipulate canvas widgets</td></tr>
          <tr><td class="names"><a href="./canvasLabel">canvasLabel(n)</a>          </td><td class="summary">tkpiechart canvas label class</td></tr>
          <tr><td class="names"><a href="./canvas_mvg">canvas_mvg(n)</a>, <a href="./canvas::mvg">canvas::mvg(n)</a></td><td class="summary">Canvas to ImageMagick MVG vector format</td></tr>
          <tr><td class="names"><a href="./canvas_snap">canvas_snap(n)</a>, <a href="./canvas::snap">canvas::snap(n)</a></td><td class="summary">Canvas snapshot to Tk photo image</td></tr>
          <tr><td class="names"><a href="./canvas_sqmap">canvas_sqmap(n)</a>, <a href="./canvas::sqmap">canvas::sqmap(n)</a></td><td class="summary">Canvas with map background based on square tiles</td></tr>
          <tr><td class="names"><a href="./canvas_zoom">canvas_zoom(n)</a>, <a href="./canvas::zoom">canvas::zoom(n)</a></td><td class="summary">Zoom control for canvas::sqmap</td></tr>
          <tr><td class="names"><a href="./case">case(ntcl)</a>              </td><td class="summary">Evaluate one of several scripts, depending on a given value</td></tr>
          <tr><td class="names"><a href="./catch">catch(ntcl)</a>             </td><td class="summary">Evaluate script and trap exceptional returns</td></tr>
          <tr><td class="names"><a href="./cd">cd(ntcl)</a>                </td><td class="summary">Change working directory</td></tr>
          <tr><td class="names"><a href="./cfront">cfront(n)</a>, <a href="./fileutil::magic::cfront">fileutil::magic::cfront(n)</a></td><td class="summary">Generator core for compiler of magic(5) files</td></tr>
          <tr><td class="names"><a href="./cgen">cgen(n)</a>, <a href="./fileutil::magic::cgen">fileutil::magic::cgen(n)</a></td><td class="summary">Generator core for compiler of magic(5) files</td></tr>
          <tr><td class="names"><a href="./chan">chan(ntcl)</a>              </td><td class="summary">Read, write and manipulate channels</td></tr>
          <tr><td class="names"><a href="./changelog">changelog(n)</a>, <a href="./doctools::changelog">doctools::changelog(n)</a></td><td class="summary">Processing text in Emacs ChangeLog format</td></tr>
          <tr><td class="names"><a href="./chatwidget">chatwidget(n)</a>           </td><td class="summary">Provides a multi-paned view suitable for display of chat room or irc channel information</td></tr>
          <tr><td class="names"><a href="./checkbutton">checkbutton(ntcl)</a>       </td><td class="summary">Create and manipulate checkbutton widgets</td></tr>
          <tr><td class="names"><a href="./cksum">cksum(n)</a>                </td><td class="summary">Calculate a cksum(1) compatible checksum</td></tr>
          <tr><td class="names"><a href="./class">class(n)</a>                </td><td class="summary">create a class of objects</td></tr>
          <tr><td class="names"><a href="./clipboard">clipboard(ntcl)</a>         </td><td class="summary">Manipulate Tk clipboard</td></tr>
          <tr><td class="names"><a href="./clock">clock(ntcl)</a>             </td><td class="summary">Obtain and manipulate dates and times</td></tr>
          <tr><td class="names"><a href="./close">close(ntcl)</a>             </td><td class="summary">Close an open channel</td></tr>
          <tr><td class="names"><a href="./cmdline">cmdline(n)</a>              </td><td class="summary">Procedures to process command lines and options</td></tr>
          <tr><td class="names"><a href="./code">code(n)</a>                 </td><td class="summary">capture the namespace context for a code fragment</td></tr>
          <tr><td class="names"><a href="./colors">colors(ntcl)</a>            </td><td class="summary">symbolic color names recognized by Tk</td></tr>
          <tr><td class="names"><a href="./combinatorics">combinatorics(n)</a>, <a href="./math::combinatorics">math::combinatorics(n)</a></td><td class="summary">Combinatorial functions in the Tcl Math Library</td></tr>
          <tr><td class="names"><a href="./comm">comm(n)</a>                 </td><td class="summary">A remote communication facility for Tcl (8.3 and later)</td></tr>
          <tr><td class="names"><a href="./comm_wire">comm_wire(n)</a>            </td><td class="summary">The comm wire protocol</td></tr>
          <tr><td class="names"><a href="./concat">concat(ntcl)</a>            </td><td class="summary">Join lists together</td></tr>
          <tr><td class="names"><a href="./configbody">configbody(n)</a>           </td><td class="summary">change the "config" code for a public variable</td></tr>
          <tr><td class="names"><a href="./connect">connect(n)</a>, <a href="./transfer::connect">transfer::connect(n)</a></td><td class="summary">Connection setup</td></tr>
          <tr><td class="names"><a href="./console">console(ntcl)</a>           </td><td class="summary">Control the console on systems without a real console</td></tr>
          <tr><td class="names"><a href="./constants">constants(n)</a>, <a href="./math::constants">math::constants(n)</a></td><td class="summary">Mathematical and numerical constants</td></tr>
          <tr><td class="names"><a href="./container">container(n)</a>, <a href="./doctools::toc">doctools::toc(n)</a></td><td class="summary">Holding tables of contents</td></tr>
          <tr><td class="names"><a href="./continue">continue(ntcl)</a>          </td><td class="summary">Skip to the next iteration of a loop</td></tr>
          <tr><td class="names"><a href="./control">control(n)</a>              </td><td class="summary">Procedures for control flow structures</td></tr>
          <tr><td class="names"><a href="./controlwidget">controlwidget(n)</a>        </td><td class="summary">Collection of widgets for displaying and controlling numerical values</td></tr>
          <tr><td class="names"><a href="./copyops">copyops(n)</a>, <a href="./transfer::copy">transfer::copy(n)</a></td><td class="summary">Data transfer foundation</td></tr>
          <tr><td class="names"><a href="./counter">counter(n)</a>              </td><td class="summary">Procedures for counters and histograms</td></tr>
          <tr><td class="names"><a href="./crc">crc(n)</a>                  </td><td class="summary">Message digest "crc"</td></tr>
          <tr><td class="names"><a href="./crc-zlib">crc-zlib(n)</a>             </td><td class="summary">Message digest "crc-zlib"</td></tr>
          <tr><td class="names"><a href="./crc16">crc16(n)</a>                </td><td class="summary">Perform a 16bit Cyclic Redundancy Check</td></tr>
          <tr><td class="names"><a href="./crc32">crc32(n)</a>                </td><td class="summary">Perform a 32bit Cyclic Redundancy Check</td></tr>
          <tr><td class="names"><a href="./crosshair">crosshair(n)</a>            </td><td class="summary">Crosshairs for Tk canvas</td></tr>
          <tr><td class="names"><a href="./crypt">crypt(n)</a>                </td><td class="summary">Password hashing based on "crypt"</td></tr>
          <tr><td class="names"><a href="./csv">csv(n)</a>                  </td><td class="summary">Procedures to handle CSV data</td></tr>
          <tr><td class="names"><a href="./ctext">ctext(n)</a>                </td><td class="summary">Ctext a text widget with highlighting support</td></tr>
          <tr><td class="names"><a href="./cursor">cursor(n)</a>               </td><td class="summary">Procedures to handle CURSOR data</td></tr>
          <tr><td class="names"><a href="./cursors">cursors(ntcl)</a>           </td><td class="summary">mouse cursors available in Tk</td></tr>
          <tr><td class="names"><a href="./cvs">cvs(n)</a>, <a href="./doctools::cvs">doctools::cvs(n)</a></td><td class="summary">Processing text in 'cvs log' format</td></tr>
          <tr><td class="names"><a href="./dacceptor">dacceptor(n)</a>, <a href="./grammar::fa::dacceptor">grammar::fa::dacceptor(n)</a></td><td class="summary">Create and use deterministic acceptors</td></tr>
          <tr><td class="names"><a href="./datefield">datefield(n)</a>            </td><td class="summary">Tk datefield widget</td></tr>
          <tr><td class="names"><a href="./dde">dde(ntcl)</a>               </td><td class="summary">Execute a Dynamic Data Exchange command</td></tr>
          <tr><td class="names"><a href="./ddest">ddest(n)</a>, <a href="./transfer::data::destination">transfer::data::destination(n)</a></td><td class="summary">Data destination</td></tr>
          <tr><td class="names"><a href="./deleg_method">deleg_method(n)</a>         </td><td class="summary">Creation of comm delegates (snit methods)</td></tr>
          <tr><td class="names"><a href="./deleg_proc">deleg_proc(n)</a>           </td><td class="summary">Creation of comm delegates (procedures)</td></tr>
          <tr><td class="names"><a href="./delete">delete(n)</a>               </td><td class="summary">delete things in the interpreter</td></tr>
          <tr><td class="names"><a href="./des">des(n)</a>                  </td><td class="summary">Implementation of the DES and triple-DES ciphers</td></tr>
          <tr><td class="names"><a href="./destroy">destroy(ntcl)</a>           </td><td class="summary">Destroy one or more windows</td></tr>
          <tr><td class="names"><a href="./dexec">dexec(n)</a>, <a href="./grammar::fa::dexec">grammar::fa::dexec(n)</a></td><td class="summary">Execute deterministic finite automatons</td></tr>
          <tr><td class="names"><a href="./diagram">diagram(n)</a>              </td><td class="summary">Diagram drawing</td></tr>
          <tr><td class="names"><a href="./dict">dict(ntcl)</a>              </td><td class="summary">Manipulate dictionaries</td></tr>
          <tr><td class="names"><a href="./disjointset">disjointset(n)</a>, <a href="./struct::disjointset">struct::disjointset(n)</a></td><td class="summary">Disjoint set data structure</td></tr>
          <tr><td class="names"><a href="./docidx">docidx(n)</a>, <a href="./doctools::idx">doctools::idx(n)</a></td><td class="summary">docidx - Processing indices</td></tr>
          <tr><td class="names"><a href="./docidx_intro">docidx_intro(n)</a>         </td><td class="summary">docidx introduction</td></tr>
          <tr><td class="names"><a href="./docidx_lang_cmdref">docidx_lang_cmdref(n)</a>   </td><td class="summary">docidx language command reference</td></tr>
          <tr><td class="names"><a href="./docidx_lang_faq">docidx_lang_faq(n)</a>      </td><td class="summary">docidx language faq</td></tr>
          <tr><td class="names"><a href="./docidx_lang_intro">docidx_lang_intro(n)</a>    </td><td class="summary">docidx language introduction</td></tr>
          <tr><td class="names"><a href="./docidx_lang_syntax">docidx_lang_syntax(n)</a>   </td><td class="summary">docidx language syntax</td></tr>
          <tr><td class="names"><a href="./docidx_plugin_apiref">docidx_plugin_apiref(n)</a> </td><td class="summary">docidx plugin API reference</td></tr>
          <tr><td class="names"><a href="./docstrip">docstrip(n)</a>             </td><td class="summary">Docstrip style source code extraction</td></tr>
          <tr><td class="names"><a href="./docstrip_util">docstrip_util(n)</a>        </td><td class="summary">Docstrip-related utilities</td></tr>
          <tr><td class="names"><a href="./doctoc">doctoc(n)</a>, <a href="./doctools::toc">doctools::toc(n)</a></td><td class="summary">doctoc - Processing tables of contents</td></tr>
          <tr><td class="names"><a href="./doctoc_intro">doctoc_intro(n)</a>         </td><td class="summary">doctoc introduction</td></tr>
          <tr><td class="names"><a href="./doctoc_lang_cmdref">doctoc_lang_cmdref(n)</a>   </td><td class="summary">doctoc language command reference</td></tr>
          <tr><td class="names"><a href="./doctoc_lang_faq">doctoc_lang_faq(n)</a>      </td><td class="summary">doctoc language faq</td></tr>
          <tr><td class="names"><a href="./doctoc_lang_intro">doctoc_lang_intro(n)</a>    </td><td class="summary">doctoc language introduction</td></tr>
          <tr><td class="names"><a href="./doctoc_lang_syntax">doctoc_lang_syntax(n)</a>   </td><td class="summary">doctoc language syntax</td></tr>
          <tr><td class="names"><a href="./doctoc_plugin_apiref">doctoc_plugin_apiref(n)</a> </td><td class="summary">doctoc plugin API reference</td></tr>
          <tr><td class="names"><a href="./doctools">doctools(n)</a>             </td><td class="summary">doctools - Processing documents</td></tr>
          <tr><td class="names"><a href="./doctools_intro">doctools_intro(n)</a>       </td><td class="summary">doctools introduction</td></tr>
          <tr><td class="names"><a href="./doctools_lang_cmdref">doctools_lang_cmdref(n)</a> </td><td class="summary">doctools language command reference</td></tr>
          <tr><td class="names"><a href="./doctools_lang_faq">doctools_lang_faq(n)</a>    </td><td class="summary">doctools language faq</td></tr>
          <tr><td class="names"><a href="./doctools_lang_intro">doctools_lang_intro(n)</a>  </td><td class="summary">doctools language introduction</td></tr>
          <tr><td class="names"><a href="./doctools_lang_syntax">doctools_lang_syntax(n)</a> </td><td class="summary">doctools language syntax</td></tr>
          <tr><td class="names"><a href="./doctools_plugin_apiref">doctools_plugin_apiref(n)</a></td><td class="summary">doctools plugin API reference</td></tr>
          <tr><td class="names"><a href="./dsource">dsource(n)</a>, <a href="./transfer::data::source">transfer::data::source(n)</a></td><td class="summary">Data source</td></tr>
          <tr><td class="names"><a href="./dump">dump(n)</a>                 </td><td class="summary">Dump information about Tcl interpreter in TkCon</td></tr>
          <tr><td class="names"><a href="./encoding">encoding(ntcl)</a>          </td><td class="summary">Manipulate encodings</td></tr>
          <tr><td class="names"><a href="./ensemble">ensemble(n)</a>             </td><td class="summary">create or modify a composite command</td></tr>
          <tr><td class="names"><a href="./entry">entry(ntcl)</a>             </td><td class="summary">Create and manipulate entry widgets</td></tr>
          <tr><td class="names"><a href="./eof">eof(ntcl)</a>               </td><td class="summary">Check for end of file condition on channel</td></tr>
          <tr><td class="names"><a href="./error">error(ntcl)</a>             </td><td class="summary">Generate an error</td></tr>
          <tr><td class="names"><a href="./eval">eval(ntcl)</a>              </td><td class="summary">Evaluate a Tcl script</td></tr>
          <tr><td class="names"><a href="./event">event(ntcl)</a>             </td><td class="summary">Miscellaneous event facilities: define virtual events and generate events</td></tr>
          <tr><td class="names"><a href="./exec">exec(ntcl)</a>              </td><td class="summary">Invoke subprocesses</td></tr>
          <tr><td class="names"><a href="./exit">exit(ntcl)</a>              </td><td class="summary">End the application</td></tr>
          <tr><td class="names"><a href="./expander">expander(n)</a>, <a href="./textutil::expander">textutil::expander(n)</a></td><td class="summary">Procedures to process templates and expand text</td></tr>
          <tr><td class="names"><a href="./export">export(n)</a>, <a href="./doctools::toc::export">doctools::toc::export(n)</a></td><td class="summary">Exporting tables of contents</td></tr>
          <tr><td class="names"><a href="./export_docidx">export_docidx(n)</a>, <a href="./doctools::idx::export::docidx">doctools::idx::export::docidx(n)</a></td><td class="summary">docidx export plugin</td></tr>
          <tr><td class="names"><a href="./export_doctoc">export_doctoc(n)</a>, <a href="./doctools::toc::export::doctoc">doctools::toc::export::doctoc(n)</a></td><td class="summary">doctoc export plugin</td></tr>
          <tr><td class="names"><a href="./export_html">export_html(n)</a>, <a href="./doctools::toc::export::html">doctools::toc::export::html(n)</a></td><td class="summary">HTML export plugin</td></tr>
          <tr><td class="names"><a href="./export_json">export_json(n)</a>, <a href="./doctools::toc::export::json">doctools::toc::export::json(n)</a></td><td class="summary">JSON export plugin</td></tr>
          <tr><td class="names"><a href="./export_nroff">export_nroff(n)</a>, <a href="./doctools::toc::export::nroff">doctools::toc::export::nroff(n)</a></td><td class="summary">nroff export plugin</td></tr>
          <tr><td class="names"><a href="./export_text">export_text(n)</a>, <a href="./doctools::toc::export::text">doctools::toc::export::text(n)</a></td><td class="summary">plain text export plugin</td></tr>
          <tr><td class="names"><a href="./export_wiki">export_wiki(n)</a>, <a href="./doctools::toc::export::wiki">doctools::toc::export::wiki(n)</a></td><td class="summary">wiki export plugin</td></tr>
          <tr><td class="names"><a href="./expr">expr(ntcl)</a>              </td><td class="summary">Evaluate an expression</td></tr>
          <tr><td class="names"><a href="./fa">fa(n)</a>, <a href="./grammar::fa">grammar::fa(n)</a>   </td><td class="summary">Create and manipulate finite automatons</td></tr>
          <tr><td class="names"><a href="./faop">faop(n)</a>, <a href="./grammar::fa::op">grammar::fa::op(n)</a></td><td class="summary">Operations on finite automatons</td></tr>
          <tr><td class="names"><a href="./fblocked">fblocked(ntcl)</a>          </td><td class="summary">Test whether the last input operation exhausted all available input</td></tr>
          <tr><td class="names"><a href="./fconfigure">fconfigure(ntcl)</a>        </td><td class="summary">Set and get options on a channel</td></tr>
          <tr><td class="names"><a href="./fcopy">fcopy(ntcl)</a>             </td><td class="summary">Copy data from one channel to another</td></tr>
          <tr><td class="names"><a href="./fifo">fifo(n)</a>                 </td><td class="summary">Create and manipulate u-turn fifo channels</td></tr>
          <tr><td class="names"><a href="./fifo2">fifo2(n)</a>                </td><td class="summary">Create and manipulate pipe fifo channels</td></tr>
          <tr><td class="names"><a href="./file">file(ntcl)</a>              </td><td class="summary">Manipulate file names and attributes</td></tr>
          <tr><td class="names"><a href="./fileevent">fileevent(ntcl)</a>         </td><td class="summary">Execute a script when a channel becomes readable or writable</td></tr>
          <tr><td class="names"><a href="./filename">filename(ntcl)</a>          </td><td class="summary">File name conventions supported by Tcl commands</td></tr>
          <tr><td class="names"><a href="./filetypes">filetypes(n)</a>, <a href="./fileutil::magic::filetype">fileutil::magic::filetype(n)</a></td><td class="summary">Procedures implementing file-type recognition</td></tr>
          <tr><td class="names"><a href="./fileutil">fileutil(n)</a>             </td><td class="summary">Procedures implementing some file utilities</td></tr>
          <tr><td class="names"><a href="./find">find(n)</a>                 </td><td class="summary">search for classes and objects</td></tr>
          <tr><td class="names"><a href="./flush">flush(ntcl)</a>             </td><td class="summary">Flush buffered output for a channel</td></tr>
          <tr><td class="names"><a href="./focus">focus(ntcl)</a>             </td><td class="summary">Manage the input focus</td></tr>
          <tr><td class="names"><a href="./font">font(ntcl)</a>              </td><td class="summary">Create and inspect fonts</td></tr>
          <tr><td class="names"><a href="./for">for(ntcl)</a>               </td><td class="summary">'For' loop</td></tr>
          <tr><td class="names"><a href="./foreach">foreach(ntcl)</a>           </td><td class="summary">Iterate over all elements in one or more lists</td></tr>
          <tr><td class="names"><a href="./format">format(ntcl)</a>            </td><td class="summary">Format a string in the style of sprintf</td></tr>
          <tr><td class="names"><a href="./fourier">fourier(n)</a>, <a href="./math::fourier">math::fourier(n)</a></td><td class="summary">Discrete and fast fourier transforms</td></tr>
          <tr><td class="names"><a href="./frame">frame(ntcl)</a>             </td><td class="summary">Create and manipulate frame widgets</td></tr>
          <tr><td class="names"><a href="./ftp">ftp(n)</a>                  </td><td class="summary">Client-side tcl implementation of the ftp protocol</td></tr>
          <tr><td class="names"><a href="./ftp_geturl">ftp_geturl(n)</a>, <a href="./ftp::geturl">ftp::geturl(n)</a></td><td class="summary">Uri handler for ftp urls</td></tr>
          <tr><td class="names"><a href="./ftpd">ftpd(n)</a>                 </td><td class="summary">Tcl FTP server implementation</td></tr>
          <tr><td class="names"><a href="./fuzzy">fuzzy(n)</a>, <a href="./math::fuzzy">math::fuzzy(n)</a></td><td class="summary">Fuzzy comparison of floating-point numbers</td></tr>
          <tr><td class="names"><a href="./gasm">gasm(n)</a>, <a href="./grammar::me::cpu::gasm">grammar::me::cpu::gasm(n)</a></td><td class="summary">ME assembler</td></tr>
          <tr><td class="names"><a href="./geometry">geometry(n)</a>, <a href="./math::geometry">math::geometry(n)</a></td><td class="summary">Geometrical computations</td></tr>
          <tr><td class="names"><a href="./gets">gets(ntcl)</a>              </td><td class="summary">Read a line from a channel</td></tr>
          <tr><td class="names"><a href="./glob">glob(ntcl)</a>              </td><td class="summary">Return names of files that match patterns</td></tr>
          <tr><td class="names"><a href="./global">global(ntcl)</a>            </td><td class="summary">Access global variables</td></tr>
          <tr><td class="names"><a href="./grab">grab(ntcl)</a>              </td><td class="summary">Confine pointer and keyboard events to a window sub-tree</td></tr>
          <tr><td class="names"><a href="./graph">graph(n)</a>, <a href="./struct::graph">struct::graph(n)</a></td><td class="summary">Create and manipulate directed graph objects</td></tr>
          <tr><td class="names"><a href="./graph1">graph1(n)</a>, <a href="./struct::graph%20v1">struct::graph v1(n)</a></td><td class="summary">Create and manipulate directed graph objects</td></tr>
          <tr><td class="names"><a href="./graphops">graphops(n)</a>, <a href="./struct::graph::op">struct::graph::op(n)</a></td><td class="summary">Operation for (un)directed graph objects</td></tr>
          <tr><td class="names"><a href="./grid">grid(ntcl)</a>              </td><td class="summary">Geometry manager that arranges widgets in a grid</td></tr>
          <tr><td class="names"><a href="./haval">haval(n)</a>                </td><td class="summary">Message digest "haval"</td></tr>
          <tr><td class="names"><a href="./hex">hex(n)</a>                  </td><td class="summary">Encoding "hex"</td></tr>
          <tr><td class="names"><a href="./history">history(ntcl)</a>           </td><td class="summary">Manipulate the history list</td></tr>
          <tr><td class="names"><a href="./html">html(n)</a>                 </td><td class="summary">Procedures to generate HTML structures</td></tr>
          <tr><td class="names"><a href="./html_cssdefaults">html_cssdefaults(n)</a>, <a href="./doctools::html::cssdefaults">doctools::html::cssdefaults(n)</a></td><td class="summary">Default CSS style for HTML export plugins</td></tr>
          <tr><td class="names"><a href="./htmlparse">htmlparse(n)</a>            </td><td class="summary">Procedures to parse HTML strings</td></tr>
          <tr><td class="names"><a href="./http">http(ntcl)</a>              </td><td class="summary">Client-side implementation of the HTTP/1.1 protocol</td></tr>
          <tr><td class="names"><a href="./huddle">huddle(n)</a>               </td><td class="summary">Create and manipulate huddle object</td></tr>
          <tr><td class="names"><a href="./ico">ico(n)</a>                  </td><td class="summary">Reading and writing windows icons</td></tr>
          <tr><td class="names"><a href="./idebug">idebug(n)</a>               </td><td class="summary">Interactive debugging environment in TkCon</td></tr>
          <tr><td class="names"><a href="./ident">ident(n)</a>                </td><td class="summary">Ident protocol client</td></tr>
          <tr><td class="names"><a href="./if">if(ntcl)</a>                </td><td class="summary">Execute scripts conditionally</td></tr>
          <tr><td class="names"><a href="./image">image(ntcl)</a>             </td><td class="summary">Create and manipulate images</td></tr>
          <tr><td class="names"><a href="./imap4">imap4(n)</a>                </td><td class="summary">imap client-side tcl implementation of imap protocol</td></tr>
          <tr><td class="names"><a href="./imenu">imenu(n)</a>, <a href="./term::interact::menu">term::interact::menu(n)</a></td><td class="summary">Terminal widget, menu</td></tr>
          <tr><td class="names"><a href="./import">import(n)</a>, <a href="./doctools::toc::import">doctools::toc::import(n)</a></td><td class="summary">Importing keyword indices</td></tr>
          <tr><td class="names"><a href="./import_docidx">import_docidx(n)</a>, <a href="./doctools::idx::import::docidx">doctools::idx::import::docidx(n)</a></td><td class="summary">docidx import plugin</td></tr>
          <tr><td class="names"><a href="./import_doctoc">import_doctoc(n)</a>, <a href="./doctools::toc::import::doctoc">doctools::toc::import::doctoc(n)</a></td><td class="summary">doctoc import plugin</td></tr>
          <tr><td class="names"><a href="./import_json">import_json(n)</a>, <a href="./doctools::toc::import::json">doctools::toc::import::json(n)</a></td><td class="summary">JSON import plugin</td></tr>
          <tr><td class="names"><a href="./incr">incr(ntcl)</a>              </td><td class="summary">Increment the value of a variable</td></tr>
          <tr><td class="names"><a href="./info">info(ntcl)</a>              </td><td class="summary">Return information about the state of the Tcl interpreter</td></tr>
          <tr><td class="names"><a href="./ini">ini(n)</a>, <a href="./inifile">inifile(n)</a>      </td><td class="summary">Parsing of Windows INI files</td></tr>
          <tr><td class="names"><a href="./interp">interp(ntcl)</a>            </td><td class="summary">Create and manipulate Tcl interpreters</td></tr>
          <tr><td class="names"><a href="./interpolate">interpolate(n)</a>, <a href="./math::interpolate">math::interpolate(n)</a></td><td class="summary">Interpolation routines</td></tr>
          <tr><td class="names"><a href="./introduction">introduction(n)</a>, <a href="./doctools2toc_introduction">doctools2toc_introduction(n)</a></td><td class="summary">DocTools - Tables of Contents</td></tr>
          <tr><td class="names"><a href="./ipager">ipager(n)</a>, <a href="./term::interact::pager">term::interact::pager(n)</a></td><td class="summary">Terminal widget, paging</td></tr>
          <tr><td class="names"><a href="./ipentry">ipentry(n)</a>              </td><td class="summary">An IP address entry widget</td></tr>
          <tr><td class="names"><a href="./irc">irc(n)</a>                  </td><td class="summary">Create IRC connection and interface</td></tr>
          <tr><td class="names"><a href="./is">is(n)</a>                   </td><td class="summary">test argument to see if it is a class or an object</td></tr>
          <tr><td class="names"><a href="./itcl">itcl(n)</a>                 </td><td class="summary">object-oriented extensions to Tcl</td></tr>
          <tr><td class="names"><a href="./itclvars">itclvars(n)</a>             </td><td class="summary">variables used by [incr Tcl]</td></tr>
          <tr><td class="names"><a href="./itk">itk(n)</a>                  </td><td class="summary">framework for building mega-widgets in Tcl/Tk</td></tr>
          <tr><td class="names"><a href="./itkvars">itkvars(n)</a>              </td><td class="summary">variables used by [incr Tk]</td></tr>
          <tr><td class="names"><a href="./iwidgets_buttonbox">iwidgets_buttonbox(n)</a>, <a href="./iwidgets::buttonbox">iwidgets::buttonbox(n)</a></td><td class="summary">Create and manipulate a manager widget for buttons</td></tr>
          <tr><td class="names"><a href="./iwidgets_calendar">iwidgets_calendar(n)</a>, <a href="./iwidgets::calendar">iwidgets::calendar(n)</a></td><td class="summary">Create and manipulate a monthly calendar</td></tr>
          <tr><td class="names"><a href="./iwidgets_canvasprintbox">iwidgets_canvasprintbox(n)</a>, <a href="./iwidgets::canvasprintbox">iwidgets::canvasprintbox(n)</a></td><td class="summary">Create and manipulate a canvas print box widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_canvasprintdialog">iwidgets_canvasprintdialog(n)</a>, <a href="./iwidgets::canvasprintdialog">iwidgets::canvasprintdialog(n)</a></td><td class="summary">Create and manipulate a canvas print dialog widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_checkbox">iwidgets_checkbox(n)</a>, <a href="./iwidgets::checkbox">iwidgets::checkbox(n)</a></td><td class="summary">Create and manipulate a checkbox widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_combobox">iwidgets_combobox(n)</a>, <a href="./iwidgets::combobox">iwidgets::combobox(n)</a></td><td class="summary">Create and manipulate combination box widgets</td></tr>
          <tr><td class="names"><a href="./iwidgets_dateentry">iwidgets_dateentry(n)</a>, <a href="./iwidgets::dateentry">iwidgets::dateentry(n)</a></td><td class="summary">Create and manipulate a dateentry widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_datefield">iwidgets_datefield(n)</a>, <a href="./iwidgets::datefield">iwidgets::datefield(n)</a></td><td class="summary">Create and manipulate a date field widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_dialog">iwidgets_dialog(n)</a>, <a href="./iwidgets::dialog">iwidgets::dialog(n)</a></td><td class="summary">Create and manipulate a dialog widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_dialogshell">iwidgets_dialogshell(n)</a>, <a href="./iwidgets::dialogshell">iwidgets::dialogshell(n)</a></td><td class="summary">Create and manipulate a dialog shell widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_disjointlistbox">iwidgets_disjointlistbox(n)</a>, <a href="./iwidgets::disjointlistbox">iwidgets::disjointlistbox(n)</a></td><td class="summary">Create and manipulate a disjointlistbox widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_entryfield">iwidgets_entryfield(n)</a>, <a href="./iwidgets::entryfield">iwidgets::entryfield(n)</a></td><td class="summary">Create and manipulate a entry field widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_extbutton">iwidgets_extbutton(n)</a>, <a href="./iwidgets::extbutton">iwidgets::extbutton(n)</a></td><td class="summary">Extends the behavior of the Tk button by allowing a bitmap or image to coexist with text</td></tr>
          <tr><td class="names"><a href="./iwidgets_extfileselectionbox">iwidgets_extfileselectionbox(n)</a>, <a href="./iwidgets::extfileselectionbox">iwidgets::extfileselectionbox(n)</a></td><td class="summary">Create and manipulate a file selection box widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_extfileselectiondialog">iwidgets_extfileselectiondialog(n)</a>, <a href="./iwidgets::extfileselectiondialog">iwidgets::extfileselectiondialog(n)</a></td><td class="summary">Create and manipulate a file selection dialog widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_feedback">iwidgets_feedback(n)</a>, <a href="./iwidgets::feedback">iwidgets::feedback(n)</a></td><td class="summary">Create and manipulate a feedback widget to display feedback on the current status of an ongoing operation to the user</td></tr>
          <tr><td class="names"><a href="./iwidgets_fileselectionbox">iwidgets_fileselectionbox(n)</a>, <a href="./iwidgets::fileselectionbox">iwidgets::fileselectionbox(n)</a></td><td class="summary">Create and manipulate a file selection box widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_fileselectiondialog">iwidgets_fileselectiondialog(n)</a>, <a href="./iwidgets::fileselectiondialog">iwidgets::fileselectiondialog(n)</a></td><td class="summary">Create and manipulate a file selection dialog widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_finddialog">iwidgets_finddialog(n)</a>, <a href="./iwidgets::finddialog">iwidgets::finddialog(n)</a></td><td class="summary">Create and manipulate a find dialog widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_hierarchy">iwidgets_hierarchy(n)</a>, <a href="./iwidgets::hierarchy">iwidgets::hierarchy(n)</a></td><td class="summary">Create and manipulate a hierarchy widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_hyperhelp">iwidgets_hyperhelp(n)</a>, <a href="./iwidgets::hyperhelp">iwidgets::hyperhelp(n)</a></td><td class="summary">Create and manipulate a hyperhelp widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_labeledframe">iwidgets_labeledframe(n)</a>, <a href="./iwidgets::labeledframe">iwidgets::labeledframe(n)</a></td><td class="summary">Create and manipulate a labeled frame widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_labeledwidget">iwidgets_labeledwidget(n)</a>, <a href="./iwidgets::labeledwidget">iwidgets::labeledwidget(n)</a></td><td class="summary">Create and manipulate a labeled widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_mainwindow">iwidgets_mainwindow(n)</a>, <a href="./iwidgets::mainwindow">iwidgets::mainwindow(n)</a></td><td class="summary">Create and manipulate a mainwindow widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_menubar">iwidgets_menubar(n)</a>, <a href="./iwidgets::menubar">iwidgets::menubar(n)</a></td><td class="summary">Create and manipulate menubar menu widgets</td></tr>
          <tr><td class="names"><a href="./iwidgets_messagebox">iwidgets_messagebox(n)</a>, <a href="./iwidgets::messagebox">iwidgets::messagebox(n)</a></td><td class="summary">Create and manipulate a messagebox text widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_messagedialog">iwidgets_messagedialog(n)</a>, <a href="./iwidgets::messagedialog">iwidgets::messagedialog(n)</a></td><td class="summary">Create and manipulate a message dialog widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_notebook">iwidgets_notebook(n)</a>, <a href="./iwidgets::notebook">iwidgets::notebook(n)</a></td><td class="summary">create and manipulate notebook widgets</td></tr>
          <tr><td class="names"><a href="./iwidgets_optionmenu">iwidgets_optionmenu(n)</a>, <a href="./iwidgets::optionmenu">iwidgets::optionmenu(n)</a></td><td class="summary">Create and manipulate a option menu widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_panedwindow">iwidgets_panedwindow(n)</a>, <a href="./iwidgets::panedwindow">iwidgets::panedwindow(n)</a></td><td class="summary">Create and manipulate a paned window widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_promptdialog">iwidgets_promptdialog(n)</a>, <a href="./iwidgets::promptdialog">iwidgets::promptdialog(n)</a></td><td class="summary">Create and manipulate a prompt dialog widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_pushbutton">iwidgets_pushbutton(n)</a>, <a href="./iwidgets::pushbutton">iwidgets::pushbutton(n)</a></td><td class="summary">Create and manipulate a push button widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_radiobox">iwidgets_radiobox(n)</a>, <a href="./iwidgets::radiobox">iwidgets::radiobox(n)</a></td><td class="summary">Create and manipulate a radiobox widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_scopedobject">iwidgets_scopedobject(n)</a>, <a href="./scopedobject">scopedobject(n)</a></td><td class="summary">Create and manipulate a scoped [incr Tcl] class object</td></tr>
          <tr><td class="names"><a href="./iwidgets_scrolledcanvas">iwidgets_scrolledcanvas(n)</a>, <a href="./iwidgets::scrolledcanvas">iwidgets::scrolledcanvas(n)</a></td><td class="summary">Create and manipulate scrolled canvas widgets</td></tr>
          <tr><td class="names"><a href="./iwidgets_scrolledframe">iwidgets_scrolledframe(n)</a>, <a href="./iwidgets::scrolledframe">iwidgets::scrolledframe(n)</a></td><td class="summary">Create and manipulate scrolled frame widgets</td></tr>
          <tr><td class="names"><a href="./iwidgets_scrolledhtml">iwidgets_scrolledhtml(n)</a>, <a href="./iwidgets::scrolledhtml">iwidgets::scrolledhtml(n)</a></td><td class="summary">Create and manipulate a scrolled text widget with the capability of displaying HTML formatted documents</td></tr>
          <tr><td class="names"><a href="./iwidgets_scrolledlistbox">iwidgets_scrolledlistbox(n)</a>, <a href="./iwidgets::scrolledlistbox">iwidgets::scrolledlistbox(n)</a></td><td class="summary">Create and manipulate scrolled listbox widgets</td></tr>
          <tr><td class="names"><a href="./iwidgets_scrolledtext">iwidgets_scrolledtext(n)</a>, <a href="./iwidgets::scrolledtext">iwidgets::scrolledtext(n)</a></td><td class="summary">Create and manipulate a scrolled text widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_selectionbox">iwidgets_selectionbox(n)</a>, <a href="./iwidgets::selectionbox">iwidgets::selectionbox(n)</a></td><td class="summary">Create and manipulate a selection box widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_selectiondialog">iwidgets_selectiondialog(n)</a>, <a href="./iwidgets::selectiondialog">iwidgets::selectiondialog(n)</a></td><td class="summary">Create and manipulate a selection dialog widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_shell">iwidgets_shell(n)</a>, <a href="./iwidgets::shell">iwidgets::shell(n)</a></td><td class="summary">Create and manipulate a shell widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_spindate">iwidgets_spindate(n)</a>, <a href="./iwidgets::spindate">iwidgets::spindate(n)</a></td><td class="summary">Create and manipulate time spinner widgets</td></tr>
          <tr><td class="names"><a href="./iwidgets_spinint">iwidgets_spinint(n)</a>, <a href="./iwidgets::spinint">iwidgets::spinint(n)</a></td><td class="summary">Create and manipulate a integer spinner widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_spinner">iwidgets_spinner(n)</a>, <a href="./iwidgets::spinner">iwidgets::spinner(n)</a></td><td class="summary">Create and manipulate a spinner widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_spintime">iwidgets_spintime(n)</a>, <a href="./iwidgets::spintime">iwidgets::spintime(n)</a></td><td class="summary">Create and manipulate time spinner widgets</td></tr>
          <tr><td class="names"><a href="./iwidgets_tabnotebook">iwidgets_tabnotebook(n)</a>, <a href="./iwidgets::tabnotebook">iwidgets::tabnotebook(n)</a></td><td class="summary">create and manipulate tabnotebook widgets</td></tr>
          <tr><td class="names"><a href="./iwidgets_tabset">iwidgets_tabset(n)</a>, <a href="./iwidgets::tabset">iwidgets::tabset(n)</a></td><td class="summary">create and manipulate tabs as as set</td></tr>
          <tr><td class="names"><a href="./iwidgets_timeentry">iwidgets_timeentry(n)</a>, <a href="./iwidgets::timeentry">iwidgets::timeentry(n)</a></td><td class="summary">Create and manipulate a timeentry widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_timefield">iwidgets_timefield(n)</a>, <a href="./iwidgets::timefield">iwidgets::timefield(n)</a></td><td class="summary">Create and manipulate a time field widget</td></tr>
          <tr><td class="names"><a href="./iwidgets_toolbar">iwidgets_toolbar(n)</a>, <a href="./iwidgets::toolbar">iwidgets::toolbar(n)</a></td><td class="summary">Create and manipulate a tool bar</td></tr>
          <tr><td class="names"><a href="./iwidgets_watch">iwidgets_watch(n)</a>, <a href="./iwidgets::watch">iwidgets::watch(n)</a></td><td class="summary">Create and manipulate time with a watch widgets</td></tr>
          <tr><td class="names"><a href="./javascript">javascript(n)</a>           </td><td class="summary">Procedures to generate HTML and Java Script structures</td></tr>
          <tr><td class="names"><a href="./join">join(ntcl)</a>              </td><td class="summary">Create a string by joining together list elements</td></tr>
          <tr><td class="names"><a href="./jpeg">jpeg(n)</a>                 </td><td class="summary">JPEG querying and manipulation of meta data</td></tr>
          <tr><td class="names"><a href="./json">json(n)</a>                 </td><td class="summary">JSON parser</td></tr>
          <tr><td class="names"><a href="./json_write">json_write(n)</a>, <a href="./json::write">json::write(n)</a></td><td class="summary">JSON generation</td></tr>
          <tr><td class="names"><a href="./keysyms">keysyms(ntcl)</a>           </td><td class="summary">keysyms recognized by Tk</td></tr>
          <tr><td class="names"><a href="./khim">khim(n)</a>                 </td><td class="summary">Provides key bindings for entering international characters on a keyboard that does not support them</td></tr>
          <tr><td class="names"><a href="./label">label(ntcl)</a>             </td><td class="summary">Create and manipulate label widgets</td></tr>
          <tr><td class="names"><a href="./labelframe">labelframe(ntcl)</a>        </td><td class="summary">Create and manipulate labelframe widgets</td></tr>
          <tr><td class="names"><a href="./lappend">lappend(ntcl)</a>           </td><td class="summary">Append list elements onto a variable</td></tr>
          <tr><td class="names"><a href="./lassign">lassign(ntcl)</a>           </td><td class="summary">Assign list elements to variables</td></tr>
          <tr><td class="names"><a href="./ldap">ldap(n)</a>                 </td><td class="summary">LDAP client</td></tr>
          <tr><td class="names"><a href="./ldapx">ldapx(n)</a>                </td><td class="summary">LDAP extended object interface</td></tr>
          <tr><td class="names"><a href="./linalg">linalg(n)</a>, <a href="./math::linearalgebra">math::linearalgebra(n)</a></td><td class="summary">Linear Algebra</td></tr>
          <tr><td class="names"><a href="./lindex">lindex(ntcl)</a>            </td><td class="summary">Retrieve an element from a list</td></tr>
          <tr><td class="names"><a href="./linsert">linsert(ntcl)</a>           </td><td class="summary">Insert elements into a list</td></tr>
          <tr><td class="names"><a href="./list">list(ntcl)</a>              </td><td class="summary">Create a list</td></tr>
          <tr><td class="names"><a href="./listbox">listbox(ntcl)</a>           </td><td class="summary">Create and manipulate listbox widgets</td></tr>
          <tr><td class="names"><a href="./llength">llength(ntcl)</a>           </td><td class="summary">Count the number of elements in a list</td></tr>
          <tr><td class="names"><a href="./load">load(ntcl)</a>              </td><td class="summary">Load machine code and initialize new commands</td></tr>
          <tr><td class="names"><a href="./loadTk">loadTk(ntcl)</a>            </td><td class="summary">Load Tk into a safe interpreter</td></tr>
          <tr><td class="names"><a href="./local">local(n)</a>                </td><td class="summary">create an object local to a procedure</td></tr>
          <tr><td class="names"><a href="./log">log(n)</a>                  </td><td class="summary">Procedures to log messages of libraries and applications</td></tr>
          <tr><td class="names"><a href="./logger">logger(n)</a>               </td><td class="summary">System to control logging of events</td></tr>
          <tr><td class="names"><a href="./loggerAppender">loggerAppender(n)</a>, <a href="./logger::appender">logger::appender(n)</a></td><td class="summary">Collection of predefined appenders for logger</td></tr>
          <tr><td class="names"><a href="./loggerUtils">loggerUtils(n)</a>, <a href="./logger::utils">logger::utils(n)</a></td><td class="summary">Utilities for logger</td></tr>
          <tr><td class="names"><a href="./lower">lower(ntcl)</a>             </td><td class="summary">Change a window's position in the stacking order</td></tr>
          <tr><td class="names"><a href="./lrange">lrange(ntcl)</a>            </td><td class="summary">Return one or more adjacent elements from a list</td></tr>
          <tr><td class="names"><a href="./lrepeat">lrepeat(ntcl)</a>           </td><td class="summary">Build a list by repeating elements</td></tr>
          <tr><td class="names"><a href="./lreplace">lreplace(ntcl)</a>          </td><td class="summary">Replace elements in a list with new elements</td></tr>
          <tr><td class="names"><a href="./lreverse">lreverse(ntcl)</a>          </td><td class="summary">Reverse the order of a list</td></tr>
          <tr><td class="names"><a href="./lsearch">lsearch(ntcl)</a>           </td><td class="summary">See if a list contains a particular element</td></tr>
          <tr><td class="names"><a href="./lset">lset(ntcl)</a>              </td><td class="summary">Change an element in a list</td></tr>
          <tr><td class="names"><a href="./lsort">lsort(ntcl)</a>             </td><td class="summary">Sort the elements of a list</td></tr>
          <tr><td class="names"><a href="./machineparameters">machineparameters(n)</a>, <a href="./tclrep/machineparameters">tclrep/machineparameters(n)</a></td><td class="summary">Compute double precision machine parameters</td></tr>
          <tr><td class="names"><a href="./map_slippy">map_slippy(n)</a>, <a href="./map::slippy">map::slippy(n)</a></td><td class="summary">Common code for slippy based map packages</td></tr>
          <tr><td class="names"><a href="./map_slippy_cache">map_slippy_cache(n)</a>, <a href="./map::slippy::cache">map::slippy::cache(n)</a></td><td class="summary">Management of a tile cache in the local filesystem</td></tr>
          <tr><td class="names"><a href="./map_slippy_fetcher">map_slippy_fetcher(n)</a>, <a href="./map::slippy::fetcher">map::slippy::fetcher(n)</a></td><td class="summary">Accessing a server providing tiles for slippy-based maps</td></tr>
          <tr><td class="names"><a href="./mapproj">mapproj(n)</a>              </td><td class="summary">Map projection routines</td></tr>
          <tr><td class="names"><a href="./math">math(n)</a>                 </td><td class="summary">Tcl Math Library</td></tr>
          <tr><td class="names"><a href="./mathfunc">mathfunc(ntcl)</a>          </td><td class="summary">Mathematical functions for Tcl expressions</td></tr>
          <tr><td class="names"><a href="./mathop">mathop(ntcl)</a>            </td><td class="summary">Mathematical operators as Tcl commands</td></tr>
          <tr><td class="names"><a href="./matrix">matrix(n)</a>, <a href="./struct::matrix">struct::matrix(n)</a></td><td class="summary">Create and manipulate matrix objects</td></tr>
          <tr><td class="names"><a href="./matrix1">matrix1(n)</a>, <a href="./struct::matrix%20v1">struct::matrix v1(n)</a></td><td class="summary">Create and manipulate matrix objects</td></tr>
          <tr><td class="names"><a href="./md2">md2(n)</a>                  </td><td class="summary">Message digest "md2"</td></tr>
          <tr><td class="names"><a href="./md4">md4(n)</a>                  </td><td class="summary">MD4 Message-Digest Algorithm</td></tr>
          <tr><td class="names"><a href="./md5">md5(n)</a>                  </td><td class="summary">MD5 Message-Digest Algorithm</td></tr>
          <tr><td class="names"><a href="./md5_otp">md5_otp(n)</a>              </td><td class="summary">Message digest "md5_otp"</td></tr>
          <tr><td class="names"><a href="./md5crypt">md5crypt(n)</a>             </td><td class="summary">MD5-based password encryption</td></tr>
          <tr><td class="names"><a href="./me_ast">me_ast(n)</a>, <a href="./grammar::me_ast">grammar::me_ast(n)</a></td><td class="summary">Various representations of ASTs</td></tr>
          <tr><td class="names"><a href="./me_cpu">me_cpu(n)</a>, <a href="./grammar::me::cpu">grammar::me::cpu(n)</a></td><td class="summary">Virtual machine implementation II for parsing token streams</td></tr>
          <tr><td class="names"><a href="./me_cpucore">me_cpucore(n)</a>, <a href="./grammar::me::cpu::core">grammar::me::cpu::core(n)</a></td><td class="summary">ME virtual machine state manipulation</td></tr>
          <tr><td class="names"><a href="./me_intro">me_intro(n)</a>, <a href="./grammar::me_intro">grammar::me_intro(n)</a></td><td class="summary">Introduction to virtual machines for parsing token streams</td></tr>
          <tr><td class="names"><a href="./me_tcl">me_tcl(n)</a>, <a href="./grammar::me::tcl">grammar::me::tcl(n)</a></td><td class="summary">Virtual machine implementation I for parsing token streams</td></tr>
          <tr><td class="names"><a href="./me_util">me_util(n)</a>, <a href="./grammar::me::util">grammar::me::util(n)</a></td><td class="summary">AST utilities</td></tr>
          <tr><td class="names"><a href="./me_vm">me_vm(n)</a>, <a href="./grammar::me_vm">grammar::me_vm(n)</a></td><td class="summary">Virtual machine for parsing token streams</td></tr>
          <tr><td class="names"><a href="./memchan">memchan(n)</a>              </td><td class="summary">C API for creating memory channels</td></tr>
          <tr><td class="names"><a href="./memchan">memchan(n)</a>              </td><td class="summary">Create and manipulate memory channels</td></tr>
          <tr><td class="names"><a href="./memory">memory(ntcl)</a>            </td><td class="summary">Control Tcl memory debugging capabilities</td></tr>
          <tr><td class="names"><a href="./menu">menu(ntcl)</a>, <a href="./tk_menuSetFocus">tk_menuSetFocus(ntcl)</a></td><td class="summary">Create and manipulate menu widgets</td></tr>
          <tr><td class="names"><a href="./menubar">menubar(n)</a>              </td><td class="summary">Creates an instance of the menubar Class</td></tr>
          <tr><td class="names"><a href="./menubutton">menubutton(ntcl)</a>        </td><td class="summary">Create and manipulate menubutton widgets</td></tr>
          <tr><td class="names"><a href="./message">message(ntcl)</a>           </td><td class="summary">Create and manipulate message widgets</td></tr>
          <tr><td class="names"><a href="./mime">mime(n)</a>                 </td><td class="summary">Manipulation of MIME body parts</td></tr>
          <tr><td class="names"><a href="./mimetypes">mimetypes(n)</a>, <a href="./fileutil::magic::mimetype">fileutil::magic::mimetype(n)</a></td><td class="summary">Procedures implementing mime-type recognition</td></tr>
          <tr><td class="names"><a href="./montecarlo">montecarlo(n)</a>, <a href="./simulation::montecarlo">simulation::montecarlo(n)</a></td><td class="summary">Monte Carlo simulations</td></tr>
          <tr><td class="names"><a href="./mpexpand">mpexpand(n)</a>             </td><td class="summary">Markup processor</td></tr>
          <tr><td class="names"><a href="./msgcat">msgcat(ntcl)</a>            </td><td class="summary">Tcl message catalog</td></tr>
          <tr><td class="names"><a href="./msgcat_c">msgcat_c(n)</a>, <a href="./doctools::msgcat::toc::c">doctools::msgcat::toc::c(n)</a></td><td class="summary">Message catalog for the doctoc parser (C)</td></tr>
          <tr><td class="names"><a href="./msgcat_de">msgcat_de(n)</a>, <a href="./doctools::msgcat::toc::de">doctools::msgcat::toc::de(n)</a></td><td class="summary">Message catalog for the doctoc parser (DE)</td></tr>
          <tr><td class="names"><a href="./msgcat_en">msgcat_en(n)</a>, <a href="./doctools::msgcat::toc::en">doctools::msgcat::toc::en(n)</a></td><td class="summary">Message catalog for the doctoc parser (EN)</td></tr>
          <tr><td class="names"><a href="./msgcat_fr">msgcat_fr(n)</a>, <a href="./doctools::msgcat::toc::fr">doctools::msgcat::toc::fr(n)</a></td><td class="summary">Message catalog for the doctoc parser (FR)</td></tr>
          <tr><td class="names"><a href="./multi">multi(n)</a>, <a href="./fileutil::multi">fileutil::multi(n)</a></td><td class="summary">Multi-file operation, scatter/gather, standard object</td></tr>
          <tr><td class="names"><a href="./multiop">multiop(n)</a>, <a href="./fileutil::multi::op">fileutil::multi::op(n)</a></td><td class="summary">Multi-file operation, scatter/gather</td></tr>
          <tr><td class="names"><a href="./multiplexer">multiplexer(n)</a>          </td><td class="summary">One-to-many communication with sockets</td></tr>
          <tr><td class="names"><a href="./namespace">namespace(ntcl)</a>         </td><td class="summary">create and manipulate contexts for commands and variables</td></tr>
          <tr><td class="names"><a href="./namespacex">namespacex(n)</a>           </td><td class="summary">Namespace utility commands</td></tr>
          <tr><td class="names"><a href="./ncgi">ncgi(n)</a>                 </td><td class="summary">Procedures to manipulate CGI values</td></tr>
          <tr><td class="names"><a href="./nmea">nmea(n)</a>                 </td><td class="summary">Process NMEA data</td></tr>
          <tr><td class="names"><a href="./nns_auto">nns_auto(n)</a>, <a href="./nameserv::auto">nameserv::auto(n)</a></td><td class="summary">Name service facility, Client Extension</td></tr>
          <tr><td class="names"><a href="./nns_client">nns_client(n)</a>, <a href="./nameserv">nameserv(n)</a></td><td class="summary">Name service facility, Client</td></tr>
          <tr><td class="names"><a href="./nns_common">nns_common(n)</a>, <a href="./nameserv::common">nameserv::common(n)</a></td><td class="summary">Name service facility, shared definitions</td></tr>
          <tr><td class="names"><a href="./nns_intro">nns_intro(n)</a>            </td><td class="summary">Name service facility, introduction</td></tr>
          <tr><td class="names"><a href="./nns_protocol">nns_protocol(n)</a>, <a href="./nameserv::protocol">nameserv::protocol(n)</a></td><td class="summary">Name service facility, client/server protocol</td></tr>
          <tr><td class="names"><a href="./nns_server">nns_server(n)</a>, <a href="./nameserv::server">nameserv::server(n)</a></td><td class="summary">Name service facility, Server</td></tr>
          <tr><td class="names"><a href="./nntp">nntp(n)</a>                 </td><td class="summary">Tcl client for the NNTP protocol</td></tr>
          <tr><td class="names"><a href="./nroff_manmacros">nroff_manmacros(n)</a>, <a href="./doctools::nroff::man_macros">doctools::nroff::man_macros(n)</a></td><td class="summary">Default CSS style for NROFF export plugins</td></tr>
          <tr><td class="names"><a href="./ntext">ntext(n)</a>                </td><td class="summary">Alternative Bindings for the Text Widget</td></tr>
          <tr><td class="names"><a href="./ntextBindings">ntextBindings(n)</a>        </td><td class="summary">Alternative Bindings for the Text Widget</td></tr>
          <tr><td class="names"><a href="./ntextIndent">ntextIndent(n)</a>          </td><td class="summary">ntext Indentation for the Text Widget</td></tr>
          <tr><td class="names"><a href="./ntextWordBreak">ntextWordBreak(n)</a>       </td><td class="summary">ntext Word Boundary Detection for the Text Widget</td></tr>
          <tr><td class="names"><a href="./ntp_time">ntp_time(n)</a>             </td><td class="summary">Tcl Time Service Client</td></tr>
          <tr><td class="names"><a href="./null">null(n)</a>                 </td><td class="summary">Create and manipulate null channels</td></tr>
          <tr><td class="names"><a href="./observe">observe(n)</a>              </td><td class="summary">Runtime debugging output in TkCon</td></tr>
          <tr><td class="names"><a href="./oct">oct(n)</a>                  </td><td class="summary">Encoding "oct"</td></tr>
          <tr><td class="names"><a href="./open">open(ntcl)</a>              </td><td class="summary">Open a file-based or command pipeline channel</td></tr>
          <tr><td class="names"><a href="./optimize">optimize(n)</a>, <a href="./math::optimize">math::optimize(n)</a></td><td class="summary">Optimisation routines</td></tr>
          <tr><td class="names"><a href="./option">option(ntcl)</a>            </td><td class="summary">Add/retrieve window options to/from the option database</td></tr>
          <tr><td class="names"><a href="./options">options(ntcl)</a>           </td><td class="summary">Standard options supported by widgets</td></tr>
          <tr><td class="names"><a href="./otp">otp(n)</a>                  </td><td class="summary">One-Time Passwords</td></tr>
          <tr><td class="names"><a href="./otp_words">otp_words(n)</a>            </td><td class="summary">Encoding "otp_words"</td></tr>
          <tr><td class="names"><a href="./pack">pack(ntcl)</a>              </td><td class="summary">Geometry manager that packs around edges of cavity</td></tr>
          <tr><td class="names"><a href="./pack-old">pack-old(ntcl)</a>          </td><td class="summary">Obsolete syntax for packer geometry manager</td></tr>
          <tr><td class="names"><a href="./package">package(ntcl)</a>           </td><td class="summary">Facilities for package loading and version control</td></tr>
          <tr><td class="names"><a href="./page_intro">page_intro(n)</a>           </td><td class="summary">page introduction</td></tr>
          <tr><td class="names"><a href="./page_pluginmgr">page_pluginmgr(n)</a>       </td><td class="summary">page plugin manager</td></tr>
          <tr><td class="names"><a href="./page_util_flow">page_util_flow(n)</a>       </td><td class="summary">page dataflow/treewalker utility</td></tr>
          <tr><td class="names"><a href="./page_util_norm_lemon">page_util_norm_lemon(n)</a> </td><td class="summary">page AST normalization, LEMON</td></tr>
          <tr><td class="names"><a href="./page_util_norm_peg">page_util_norm_peg(n)</a>   </td><td class="summary">page AST normalization, PEG</td></tr>
          <tr><td class="names"><a href="./page_util_peg">page_util_peg(n)</a>        </td><td class="summary">page PEG transformation utilities</td></tr>
          <tr><td class="names"><a href="./page_util_quote">page_util_quote(n)</a>      </td><td class="summary">page character quoting utilities</td></tr>
          <tr><td class="names"><a href="./panedwindow">panedwindow(ntcl)</a>       </td><td class="summary">Create and manipulate panedwindow widgets</td></tr>
          <tr><td class="names"><a href="./parse">parse(n)</a>, <a href="./doctools::toc::parse">doctools::toc::parse(n)</a></td><td class="summary">Parsing text in doctoc format</td></tr>
          <tr><td class="names"><a href="./peg">peg(n)</a>, <a href="./grammar::peg">grammar::peg(n)</a> </td><td class="summary">Create and manipulate parsing expression grammars</td></tr>
          <tr><td class="names"><a href="./peg_interp">peg_interp(n)</a>, <a href="./grammar::peg::interp">grammar::peg::interp(n)</a></td><td class="summary">Interpreter for parsing expression grammars</td></tr>
          <tr><td class="names"><a href="./photo">photo(ntcl)</a>             </td><td class="summary">Full-color images</td></tr>
          <tr><td class="names"><a href="./picoirc">picoirc(n)</a>              </td><td class="summary">Small and simple embeddable IRC client</td></tr>
          <tr><td class="names"><a href="./pid">pid(ntcl)</a>               </td><td class="summary">Retrieve process identifiers</td></tr>
          <tr><td class="names"><a href="./pie">pie(n)</a>                  </td><td class="summary">2D or 3D pie chart object in a canvas</td></tr>
          <tr><td class="names"><a href="./pieBoxLabeler">pieBoxLabeler(n)</a>        </td><td class="summary">tkpiechart pie box style labeler class</td></tr>
          <tr><td class="names"><a href="./piePeripheralLabeler">piePeripheralLabeler(n)</a> </td><td class="summary">tkpiechart pie peripheral style labeler class</td></tr>
          <tr><td class="names"><a href="./pkg::create">pkg::create(ntcl)</a>       </td><td class="summary">Construct an appropriate 'package ifneeded' command for a given package specification</td></tr>
          <tr><td class="names"><a href="./pkg_mkIndex">pkg_mkIndex(ntcl)</a>       </td><td class="summary">Build an index for automatic loading of packages</td></tr>
          <tr><td class="names"><a href="./place">place(ntcl)</a>             </td><td class="summary">Geometry manager for fixed or rubber-sheet placement</td></tr>
          <tr><td class="names"><a href="./platform">platform(ntcl)</a>          </td><td class="summary">System identification support code and utilities</td></tr>
          <tr><td class="names"><a href="./platform::shell">platform::shell(ntcl)</a>   </td><td class="summary">System identification support code and utilities</td></tr>
          <tr><td class="names"><a href="./pluginmgr">pluginmgr(n)</a>            </td><td class="summary">Manage a plugin</td></tr>
          <tr><td class="names"><a href="./png">png(n)</a>                  </td><td class="summary">PNG querying and manipulation of meta data</td></tr>
          <tr><td class="names"><a href="./polynomials">polynomials(n)</a>, <a href="./math::polynomials">math::polynomials(n)</a></td><td class="summary">Polynomial functions</td></tr>
          <tr><td class="names"><a href="./pool">pool(n)</a>, <a href="./struct::pool">struct::pool(n)</a></td><td class="summary">Create and manipulate pool objects (of discrete items)</td></tr>
          <tr><td class="names"><a href="./pop3">pop3(n)</a>                 </td><td class="summary">Tcl client for POP3 email protocol</td></tr>
          <tr><td class="names"><a href="./pop3d">pop3d(n)</a>                </td><td class="summary">Tcl POP3 server implementation</td></tr>
          <tr><td class="names"><a href="./pop3d_dbox">pop3d_dbox(n)</a>, <a href="./pop3d::dbox">pop3d::dbox(n)</a></td><td class="summary">Simple mailbox database for pop3d</td></tr>
          <tr><td class="names"><a href="./pop3d_udb">pop3d_udb(n)</a>, <a href="./pop3d::udb">pop3d::udb(n)</a></td><td class="summary">Simple user database for pop3d</td></tr>
          <tr><td class="names"><a href="./prioqueue">prioqueue(n)</a>, <a href="./struct::prioqueue">struct::prioqueue(n)</a></td><td class="summary">Create and manipulate prioqueue objects</td></tr>
          <tr><td class="names"><a href="./proc">proc(ntcl)</a>              </td><td class="summary">Create a Tcl procedure</td></tr>
          <tr><td class="names"><a href="./profiler">profiler(n)</a>             </td><td class="summary">Tcl source code profiler</td></tr>
          <tr><td class="names"><a href="./pt">pt(n)</a>                   </td><td class="summary">Parser Tools Application</td></tr>
          <tr><td class="names"><a href="./pt_astree">pt_astree(n)</a>, <a href="./pt::ast">pt::ast(n)</a></td><td class="summary">Abstract Syntax Tree Serialization</td></tr>
          <tr><td class="names"><a href="./pt_cparam_config_critcl">pt_cparam_config_critcl(n)</a>, <a href="./pt::cparam::configuration::critcl">pt::cparam::configuration::critcl(n)</a></td><td class="summary">C/PARAM, Canned configuration, Critcl</td></tr>
          <tr><td class="names"><a href="./pt_from_api">pt_from_api(n)</a>, <a href="./pt_import_api">pt_import_api(n)</a></td><td class="summary">Parser Tools Import API</td></tr>
          <tr><td class="names"><a href="./pt_introduction">pt_introduction(n)</a>      </td><td class="summary">Introduction to Parser Tools</td></tr>
          <tr><td class="names"><a href="./pt_json_language">pt_json_language(n)</a>, <a href="./pt::json_language">pt::json_language(n)</a></td><td class="summary">The JSON Grammar Exchange Format</td></tr>
          <tr><td class="names"><a href="./pt_param">pt_param(n)</a>, <a href="./pt::param">pt::param(n)</a></td><td class="summary">PackRat Machine Specification</td></tr>
          <tr><td class="names"><a href="./pt_parser_api">pt_parser_api(n)</a>        </td><td class="summary">Parser API</td></tr>
          <tr><td class="names"><a href="./pt_peg_container">pt_peg_container(n)</a>, <a href="./pt::peg::container">pt::peg::container(n)</a></td><td class="summary">PEG Storage</td></tr>
          <tr><td class="names"><a href="./pt_peg_container_peg">pt_peg_container_peg(n)</a>, <a href="./pt::peg::container::peg">pt::peg::container::peg(n)</a></td><td class="summary">PEG Storage. Canned PEG grammar specification</td></tr>
          <tr><td class="names"><a href="./pt_peg_export">pt_peg_export(n)</a>, <a href="./pt::peg::export">pt::peg::export(n)</a></td><td class="summary">PEG Export</td></tr>
          <tr><td class="names"><a href="./pt_peg_export_container">pt_peg_export_container(n)</a>, <a href="./pt::peg::export::container">pt::peg::export::container(n)</a></td><td class="summary">PEG Export Plugin. Write CONTAINER format</td></tr>
          <tr><td class="names"><a href="./pt_peg_export_json">pt_peg_export_json(n)</a>, <a href="./pt::peg::export::json">pt::peg::export::json(n)</a></td><td class="summary">PEG Export Plugin. Write JSON format</td></tr>
          <tr><td class="names"><a href="./pt_peg_export_peg">pt_peg_export_peg(n)</a>, <a href="./pt::peg::export::peg">pt::peg::export::peg(n)</a></td><td class="summary">PEG Export Plugin. Write PEG format</td></tr>
          <tr><td class="names"><a href="./pt_peg_from_container">pt_peg_from_container(n)</a>, <a href="./pt::peg::from::container">pt::peg::from::container(n)</a></td><td class="summary">PEG Conversion. From CONTAINER format</td></tr>
          <tr><td class="names"><a href="./pt_peg_from_json">pt_peg_from_json(n)</a>, <a href="./pt::peg::from::json">pt::peg::from::json(n)</a></td><td class="summary">PEG Conversion. Read JSON format</td></tr>
          <tr><td class="names"><a href="./pt_peg_from_peg">pt_peg_from_peg(n)</a>, <a href="./pt::peg::from::peg">pt::peg::from::peg(n)</a></td><td class="summary">PEG Conversion. Read PEG format</td></tr>
          <tr><td class="names"><a href="./pt_peg_import">pt_peg_import(n)</a>, <a href="./pt::peg::import">pt::peg::import(n)</a></td><td class="summary">PEG Import</td></tr>
          <tr><td class="names"><a href="./pt_peg_import_container">pt_peg_import_container(n)</a>, <a href="./pt::peg::import::container">pt::peg::import::container(n)</a></td><td class="summary">PEG Import Plugin. From CONTAINER format</td></tr>
          <tr><td class="names"><a href="./pt_peg_import_json">pt_peg_import_json(n)</a>, <a href="./pt::peg::import::json">pt::peg::import::json(n)</a></td><td class="summary">PEG Import Plugin. Read JSON format</td></tr>
          <tr><td class="names"><a href="./pt_peg_import_peg">pt_peg_import_peg(n)</a>, <a href="./pt::peg::import::peg">pt::peg::import::peg(n)</a></td><td class="summary">PEG Import Plugin. Read PEG format</td></tr>
          <tr><td class="names"><a href="./pt_peg_interp">pt_peg_interp(n)</a>, <a href="./pt::peg::interp">pt::peg::interp(n)</a></td><td class="summary">Interpreter for parsing expression grammars</td></tr>
          <tr><td class="names"><a href="./pt_peg_introduction">pt_peg_introduction(n)</a>, <a href="./pt::pegrammar">pt::pegrammar(n)</a></td><td class="summary">Introduction to Parsing Expression Grammars</td></tr>
          <tr><td class="names"><a href="./pt_peg_language">pt_peg_language(n)</a>, <a href="./pt::peg_language">pt::peg_language(n)</a></td><td class="summary">PEG Language Tutorial</td></tr>
          <tr><td class="names"><a href="./pt_peg_to_container">pt_peg_to_container(n)</a>, <a href="./pt::peg::to::container">pt::peg::to::container(n)</a></td><td class="summary">PEG Conversion. Write CONTAINER format</td></tr>
          <tr><td class="names"><a href="./pt_peg_to_cparam">pt_peg_to_cparam(n)</a>, <a href="./pt::peg::to::cparam">pt::peg::to::cparam(n)</a></td><td class="summary">PEG Conversion. Write CPARAM format</td></tr>
          <tr><td class="names"><a href="./pt_peg_to_json">pt_peg_to_json(n)</a>, <a href="./pt::peg::to::json">pt::peg::to::json(n)</a></td><td class="summary">PEG Conversion. Write JSON format</td></tr>
          <tr><td class="names"><a href="./pt_peg_to_param">pt_peg_to_param(n)</a>, <a href="./pt::peg::to::param">pt::peg::to::param(n)</a></td><td class="summary">PEG Conversion. Write PARAM format</td></tr>
          <tr><td class="names"><a href="./pt_peg_to_peg">pt_peg_to_peg(n)</a>, <a href="./pt::peg::to::peg">pt::peg::to::peg(n)</a></td><td class="summary">PEG Conversion. Write PEG format</td></tr>
          <tr><td class="names"><a href="./pt_peg_to_tclparam">pt_peg_to_tclparam(n)</a>, <a href="./pt::peg::to::tclparam">pt::peg::to::tclparam(n)</a></td><td class="summary">PEG Conversion. Write TCLPARAM format</td></tr>
          <tr><td class="names"><a href="./pt_pegrammar">pt_pegrammar(n)</a>, <a href="./pt::peg">pt::peg(n)</a></td><td class="summary">Parsing Expression Grammar Serialization</td></tr>
          <tr><td class="names"><a href="./pt_pexpr_op">pt_pexpr_op(n)</a>, <a href="./pt::pe::op">pt::pe::op(n)</a></td><td class="summary">Parsing Expression Utilities</td></tr>
          <tr><td class="names"><a href="./pt_pexpression">pt_pexpression(n)</a>, <a href="./pt::pe">pt::pe(n)</a></td><td class="summary">Parsing Expression Serialization</td></tr>
          <tr><td class="names"><a href="./pt_pgen">pt_pgen(n)</a>, <a href="./pt::pgen">pt::pgen(n)</a> </td><td class="summary">Parser Generator</td></tr>
          <tr><td class="names"><a href="./pt_rdengine">pt_rdengine(n)</a>, <a href="./pt::rde">pt::rde(n)</a></td><td class="summary">Parsing Runtime Support, PARAM based</td></tr>
          <tr><td class="names"><a href="./pt_tclparam_config_snit">pt_tclparam_config_snit(n)</a>, <a href="./pt::tclparam::configuration::snit">pt::tclparam::configuration::snit(n)</a></td><td class="summary">Tcl/PARAM, Canned configuration, Snit</td></tr>
          <tr><td class="names"><a href="./pt_tclparam_config_tcloo">pt_tclparam_config_tcloo(n)</a>, <a href="./pt::tclparam::configuration::tcloo">pt::tclparam::configuration::tcloo(n)</a></td><td class="summary">Tcl/PARAM, Canned configuration, Tcloo</td></tr>
          <tr><td class="names"><a href="./pt_to_api">pt_to_api(n)</a>, <a href="./pt_export_api">pt_export_api(n)</a></td><td class="summary">Parser Tools Export API</td></tr>
          <tr><td class="names"><a href="./puts">puts(ntcl)</a>              </td><td class="summary">Write to a channel</td></tr>
          <tr><td class="names"><a href="./pwd">pwd(ntcl)</a>               </td><td class="summary">Return the absolute path of the current working directory</td></tr>
          <tr><td class="names"><a href="./qcomplex">qcomplex(n)</a>, <a href="./math::complexnumbers">math::complexnumbers(n)</a></td><td class="summary">Straightforward complex number package</td></tr>
          <tr><td class="names"><a href="./queue">queue(n)</a>, <a href="./struct::queue">struct::queue(n)</a></td><td class="summary">Create and manipulate queue objects</td></tr>
          <tr><td class="names"><a href="./quoted-printable">quoted-printable(n)</a>     </td><td class="summary">Encoding "quoted-printable"</td></tr>
          <tr><td class="names"><a href="./radiobutton">radiobutton(ntcl)</a>       </td><td class="summary">Create and manipulate radiobutton widgets</td></tr>
          <tr><td class="names"><a href="./raise">raise(ntcl)</a>             </td><td class="summary">Change a window's position in the stacking order</td></tr>
          <tr><td class="names"><a href="./random">random(n)</a>               </td><td class="summary">Create and manipulate randomizer channels</td></tr>
          <tr><td class="names"><a href="./rational_funcs">rational_funcs(n)</a>, <a href="./math::rationalfunctions">math::rationalfunctions(n)</a></td><td class="summary">Polynomial functions</td></tr>
          <tr><td class="names"><a href="./rc4">rc4(n)</a>                  </td><td class="summary">Implementation of the RC4 stream cipher</td></tr>
          <tr><td class="names"><a href="./rcs">rcs(n)</a>                  </td><td class="summary">RCS low level utilities</td></tr>
          <tr><td class="names"><a href="./re_syntax">re_syntax(ntcl)</a>         </td><td class="summary">Syntax of Tcl regular expressions</td></tr>
          <tr><td class="names"><a href="./read">read(ntcl)</a>              </td><td class="summary">Read from a channel</td></tr>
          <tr><td class="names"><a href="./receive">receive(n)</a>, <a href="./term::receive">term::receive(n)</a></td><td class="summary">General input from terminals</td></tr>
          <tr><td class="names"><a href="./receiver">receiver(n)</a>, <a href="./transfer::receiver">transfer::receiver(n)</a></td><td class="summary">Data source</td></tr>
          <tr><td class="names"><a href="./record">record(n)</a>, <a href="./struct::record">struct::record(n)</a></td><td class="summary">Define and create records (similar to 'C' structures)</td></tr>
          <tr><td class="names"><a href="./refchan">refchan(ntcl)</a>           </td><td class="summary">Command handler API of reflected channels, version 1</td></tr>
          <tr><td class="names"><a href="./regexp">regexp(ntcl)</a>            </td><td class="summary">Match a regular expression against a string</td></tr>
          <tr><td class="names"><a href="./registry">registry(ntcl)</a>          </td><td class="summary">Manipulate the Windows registry</td></tr>
          <tr><td class="names"><a href="./regsub">regsub(ntcl)</a>            </td><td class="summary">Perform substitutions based on regular expression pattern matching</td></tr>
          <tr><td class="names"><a href="./rename">rename(ntcl)</a>            </td><td class="summary">Rename or delete a command</td></tr>
          <tr><td class="names"><a href="./repeat">repeat(n)</a>, <a href="./textutil::repeat">textutil::repeat(n)</a></td><td class="summary">Procedures to repeat strings</td></tr>
          <tr><td class="names"><a href="./report">report(n)</a>               </td><td class="summary">Create and manipulate report objects</td></tr>
          <tr><td class="names"><a href="./rest">rest(n)</a>                 </td><td class="summary">define REST web APIs and call them inline or asychronously</td></tr>
          <tr><td class="names"><a href="./return">return(ntcl)</a>            </td><td class="summary">Return from a procedure, or set return code of a script</td></tr>
          <tr><td class="names"><a href="./ripemd128">ripemd128(n)</a>            </td><td class="summary">RIPEMD-128 Message-Digest Algorithm</td></tr>
          <tr><td class="names"><a href="./ripemd160">ripemd160(n)</a>            </td><td class="summary">RIPEMD-160 Message-Digest Algorithm</td></tr>
          <tr><td class="names"><a href="./roman">roman(n)</a>, <a href="./math::roman">math::roman(n)</a></td><td class="summary">Tools for creating and manipulating roman numerals</td></tr>
          <tr><td class="names"><a href="./romberg">romberg(n)</a>, <a href="./math::calculus::romberg">math::calculus::romberg(n)</a></td><td class="summary">Romberg integration</td></tr>
          <tr><td class="names"><a href="./rs_ecc">rs_ecc(n)</a>               </td><td class="summary">Reed-Solomon error correcting code</td></tr>
          <tr><td class="names"><a href="./rtcore">rtcore(n)</a>, <a href="./fileutil::magic::rt">fileutil::magic::rt(n)</a></td><td class="summary">Runtime core for file type recognition engines written in pure Tcl</td></tr>
          <tr><td class="names"><a href="./scale">scale(ntcl)</a>             </td><td class="summary">Create and manipulate scale widgets</td></tr>
          <tr><td class="names"><a href="./scan">scan(ntcl)</a>              </td><td class="summary">Parse string using conversion specifiers in the style of sscanf</td></tr>
          <tr><td class="names"><a href="./scope">scope(n)</a>                </td><td class="summary">capture the namespace context for a variable</td></tr>
          <tr><td class="names"><a href="./scrollbar">scrollbar(ntcl)</a>         </td><td class="summary">Create and manipulate scrollbar widgets</td></tr>
          <tr><td class="names"><a href="./seek">seek(ntcl)</a>              </td><td class="summary">Change the access position for an open channel</td></tr>
          <tr><td class="names"><a href="./selection">selection(ntcl)</a>         </td><td class="summary">Manipulate the X selection</td></tr>
          <tr><td class="names"><a href="./send">send(ntcl)</a>              </td><td class="summary">Execute a command in a different application</td></tr>
          <tr><td class="names"><a href="./set">set(ntcl)</a>               </td><td class="summary">Read and write variables</td></tr>
          <tr><td class="names"><a href="./sha">sha(n)</a>                  </td><td class="summary">Message digest "sha"</td></tr>
          <tr><td class="names"><a href="./sha1">sha1(n)</a>                 </td><td class="summary">SHA1 Message-Digest Algorithm</td></tr>
          <tr><td class="names"><a href="./sha1_otp">sha1_otp(n)</a>             </td><td class="summary">Message digest "sha1_otp"</td></tr>
          <tr><td class="names"><a href="./sha256">sha256(n)</a>               </td><td class="summary">SHA256 Message-Digest Algorithm</td></tr>
          <tr><td class="names"><a href="./simulation_random">simulation_random(n)</a>, <a href="./simulation::random">simulation::random(n)</a></td><td class="summary">Pseudo-random number generators</td></tr>
          <tr><td class="names"><a href="./skiplist">skiplist(n)</a>, <a href="./struct::skiplist">struct::skiplist(n)</a></td><td class="summary">Create and manipulate skiplists</td></tr>
          <tr><td class="names"><a href="./smtp">smtp(n)</a>                 </td><td class="summary">Client-side tcl implementation of the smtp protocol</td></tr>
          <tr><td class="names"><a href="./smtpd">smtpd(n)</a>                </td><td class="summary">Tcl SMTP server implementation</td></tr>
          <tr><td class="names"><a href="./snit">snit(n)</a>                 </td><td class="summary">Snit's Not Incr Tcl</td></tr>
          <tr><td class="names"><a href="./snitfaq">snitfaq(n)</a>              </td><td class="summary">Snit Frequently Asked Questions</td></tr>
          <tr><td class="names"><a href="./socket">socket(ntcl)</a>            </td><td class="summary">Open a TCP network connection</td></tr>
          <tr><td class="names"><a href="./soundex">soundex(n)</a>              </td><td class="summary">Soundex</td></tr>
          <tr><td class="names"><a href="./source">source(ntcl)</a>            </td><td class="summary">Evaluate a file or resource as a Tcl script</td></tr>
          <tr><td class="names"><a href="./special">special(n)</a>, <a href="./math::special">math::special(n)</a></td><td class="summary">Special mathematical functions</td></tr>
          <tr><td class="names"><a href="./spinbox">spinbox(ntcl)</a>           </td><td class="summary">Create and manipulate spinbox widgets</td></tr>
          <tr><td class="names"><a href="./split">split(ntcl)</a>             </td><td class="summary">Split a string into a proper Tcl list</td></tr>
          <tr><td class="names"><a href="./stack">stack(n)</a>, <a href="./struct::stack">struct::stack(n)</a></td><td class="summary">Create and manipulate stack objects</td></tr>
          <tr><td class="names"><a href="./statistics">statistics(n)</a>, <a href="./math::statistics">math::statistics(n)</a></td><td class="summary">Basic statistical functions and procedures</td></tr>
          <tr><td class="names"><a href="./stooop">stooop(n)</a>               </td><td class="summary">Object oriented extension</td></tr>
          <tr><td class="names"><a href="./string">string(ntcl)</a>            </td><td class="summary">Manipulate strings</td></tr>
          <tr><td class="names"><a href="./stringprep">stringprep(n)</a>           </td><td class="summary">Implementation of stringprep</td></tr>
          <tr><td class="names"><a href="./stringprep_data">stringprep_data(n)</a>, <a href="./stringprep::data">stringprep::data(n)</a></td><td class="summary">stringprep data tables, generated, internal</td></tr>
          <tr><td class="names"><a href="./struct_list">struct_list(n)</a>, <a href="./struct::list">struct::list(n)</a></td><td class="summary">Procedures for manipulating lists</td></tr>
          <tr><td class="names"><a href="./struct_set">struct_set(n)</a>, <a href="./struct::set">struct::set(n)</a></td><td class="summary">Procedures for manipulating sets</td></tr>
          <tr><td class="names"><a href="./struct_tree">struct_tree(n)</a>, <a href="./struct::tree">struct::tree(n)</a></td><td class="summary">Create and manipulate tree objects</td></tr>
          <tr><td class="names"><a href="./struct_tree1">struct_tree1(n)</a>, <a href="./struct::tree%20v1">struct::tree v1(n)</a></td><td class="summary">Create and manipulate tree objects</td></tr>
          <tr><td class="names"><a href="./structure">structure(n)</a>, <a href="./doctools::toc::structure">doctools::toc::structure(n)</a></td><td class="summary">Doctoc serialization utilities</td></tr>
          <tr><td class="names"><a href="./subst">subst(ntcl)</a>             </td><td class="summary">Perform backslash, command, and variable substitutions</td></tr>
          <tr><td class="names"><a href="./sum">sum(n)</a>                  </td><td class="summary">Calculate a sum(1) compatible checksum</td></tr>
          <tr><td class="names"><a href="./swaplist">swaplist(n)</a>             </td><td class="summary">A dialog which allows a user to move options between two lists</td></tr>
          <tr><td class="names"><a href="./switch">switch(ntcl)</a>            </td><td class="summary">Evaluate one of several scripts, depending on a given value</td></tr>
          <tr><td class="names"><a href="./tabify">tabify(n)</a>, <a href="./textutil::tabify">textutil::tabify(n)</a></td><td class="summary">Procedures to (un)tabify strings</td></tr>
          <tr><td class="names"><a href="./tar">tar(n)</a>                  </td><td class="summary">Tar file creation, extraction & manipulation</td></tr>
          <tr><td class="names"><a href="./tcl_parse">tcl_parse(n)</a>, <a href="./doctools::tcl::parse">doctools::tcl::parse(n)</a></td><td class="summary">Processing text in 'subst -novariables' format</td></tr>
          <tr><td class="names"><a href="./tcldom">tcldom(n)</a>, <a href="./::dom::DOMImplementation">::dom::DOMImplementation(n)</a></td><td class="summary">Tcl language binding for the W3C Document Object Model</td></tr>
          <tr><td class="names"><a href="./tcllib_dns">tcllib_dns(n)</a>, <a href="./dns">dns(n)</a>   </td><td class="summary">Tcl Domain Name Service Client</td></tr>
          <tr><td class="names"><a href="./tcllib_interp">tcllib_interp(n)</a>, <a href="./interp">interp(n)</a></td><td class="summary">Interp creation and aliasing</td></tr>
          <tr><td class="names"><a href="./tcllib_ip">tcllib_ip(n)</a>            </td><td class="summary">IPv4 and IPv6 address manipulation</td></tr>
          <tr><td class="names"><a href="./tcllib_msgcat">tcllib_msgcat(n)</a>, <a href="./doctools::msgcat">doctools::msgcat(n)</a></td><td class="summary">Message catalog management for the various document parsers</td></tr>
          <tr><td class="names"><a href="./tcltest">tcltest(ntcl)</a>           </td><td class="summary">Test harness support code and utilities</td></tr>
          <tr><td class="names"><a href="./tclvars">tclvars(ntcl)</a>           </td><td class="summary">Variables used by Tcl</td></tr>
          <tr><td class="names"><a href="./tclxml">tclxml(n)</a>, <a href="./::xml::parser">::xml::parser(n)</a></td><td class="summary">XML parser support for Tcl</td></tr>
          <tr><td class="names"><a href="./tell">tell(ntcl)</a>              </td><td class="summary">Return current access position for an open channel</td></tr>
          <tr><td class="names"><a href="./tepam_argument_dialogbox">tepam_argument_dialogbox(n)</a>, <a href="./tepam::argument_dialogbox">tepam::argument_dialogbox(n)</a></td><td class="summary">TEPAM argument_dialogbox, reference manual</td></tr>
          <tr><td class="names"><a href="./tepam_introduction">tepam_introduction(n)</a>, <a href="./tepam">tepam(n)</a></td><td class="summary">An introduction into TEPAM, Tcl's Enhanced Procedure and Argument Manager</td></tr>
          <tr><td class="names"><a href="./tepam_procedure">tepam_procedure(n)</a>, <a href="./tepam::procedure">tepam::procedure(n)</a></td><td class="summary">TEPAM procedure, reference manual</td></tr>
          <tr><td class="names"><a href="./term">term(n)</a>                 </td><td class="summary">General terminal control</td></tr>
          <tr><td class="names"><a href="./term_bind">term_bind(n)</a>, <a href="./term::receive::bind">term::receive::bind(n)</a></td><td class="summary">Keyboard dispatch from terminals</td></tr>
          <tr><td class="names"><a href="./term_send">term_send(n)</a>, <a href="./term::send">term::send(n)</a></td><td class="summary">General output to terminals</td></tr>
          <tr><td class="names"><a href="./text">text(ntcl)</a>, <a href="./tk_textCopy">tk_textCopy(ntcl)</a>, <a href="./tk_textCut">tk_textCut(ntcl)</a>, <a href="./tk_textPaste">tk_textPaste(ntcl)</a></td><td class="summary">Create and manipulate text widgets</td></tr>
          <tr><td class="names"><a href="./textutil">textutil(n)</a>             </td><td class="summary">Procedures to manipulate texts and strings</td></tr>
          <tr><td class="names"><a href="./textutil_split">textutil_split(n)</a>, <a href="./textutil::split">textutil::split(n)</a></td><td class="summary">Procedures to split texts</td></tr>
          <tr><td class="names"><a href="./textutil_string">textutil_string(n)</a>, <a href="./textutil::string">textutil::string(n)</a></td><td class="summary">Procedures to manipulate texts and strings</td></tr>
          <tr><td class="names"><a href="./thread">thread(n)</a>               </td><td class="summary">Extension for script access to Tcl threading</td></tr>
          <tr><td class="names"><a href="./tie">tie(n)</a>                  </td><td class="summary">Array persistence</td></tr>
          <tr><td class="names"><a href="./tie">tie(n)</a>                  </td><td class="summary">Array persistence, standard data sources</td></tr>
          <tr><td class="names"><a href="./tiff">tiff(n)</a>                 </td><td class="summary">TIFF reading, writing, and querying and manipulation of meta data</td></tr>
          <tr><td class="names"><a href="./time">time(ntcl)</a>              </td><td class="summary">Time the execution of a script</td></tr>
          <tr><td class="names"><a href="./tk">tk(ntcl)</a>                </td><td class="summary">Manipulate Tk internal state</td></tr>
          <tr><td class="names"><a href="./tkTable">tkTable(n)</a>, <a href="./table">table(n)</a>    </td><td class="summary">Create and manipulate tables</td></tr>
          <tr><td class="names"><a href="./tk_chooseColor">tk_chooseColor(ntcl)</a>    </td><td class="summary">pops up a dialog box for the user to select a color</td></tr>
          <tr><td class="names"><a href="./tk_chooseDirectory">tk_chooseDirectory(ntcl)</a></td><td class="summary">pops up a dialog box for the user to select a directory</td></tr>
          <tr><td class="names"><a href="./tk_dialog">tk_dialog(ntcl)</a>         </td><td class="summary">Create modal dialog and wait for response</td></tr>
          <tr><td class="names"><a href="./tk_focusNext">tk_focusNext(ntcl)</a>, <a href="./tk_focusPrev">tk_focusPrev(ntcl)</a>, <a href="./tk_focusFollowsMouse">tk_focusFollowsMouse(ntcl)</a></td><td class="summary">Utility procedures for managing the input focus</td></tr>
          <tr><td class="names"><a href="./tk_getOpenFile">tk_getOpenFile(ntcl)</a>, <a href="./tk_getSaveFile">tk_getSaveFile(ntcl)</a></td><td class="summary">pop up a dialog box for the user to select a file to open or save</td></tr>
          <tr><td class="names"><a href="./tk_getString">tk_getString(n)</a>, <a href="./getstring">getstring(n)</a></td><td class="summary">A string dialog</td></tr>
          <tr><td class="names"><a href="./tk_menuBar">tk_menuBar(ntcl)</a>, <a href="./tk_bindForTraversal">tk_bindForTraversal(ntcl)</a></td><td class="summary">Obsolete support for menu bars</td></tr>
          <tr><td class="names"><a href="./tk_messageBox">tk_messageBox(ntcl)</a>     </td><td class="summary">pops up a message window and waits for user response</td></tr>
          <tr><td class="names"><a href="./tk_optionMenu">tk_optionMenu(ntcl)</a>     </td><td class="summary">Create an option menubutton and its menu</td></tr>
          <tr><td class="names"><a href="./tk_popup">tk_popup(ntcl)</a>          </td><td class="summary">Post a popup menu</td></tr>
          <tr><td class="names"><a href="./tk_setPalette">tk_setPalette(ntcl)</a>, <a href="./tk_bisque">tk_bisque(ntcl)</a></td><td class="summary">Modify the Tk color palette</td></tr>
          <tr><td class="names"><a href="./tkcon">tkcon(n)</a>                </td><td class="summary">Controlling TkCon console</td></tr>
          <tr><td class="names"><a href="./tkerror">tkerror(ntcl)</a>           </td><td class="summary">Command invoked to process background errors</td></tr>
          <tr><td class="names"><a href="./tklib_history">tklib_history(n)</a>, <a href="./history">history(n)</a></td><td class="summary">Provides a history for Entry widgets</td></tr>
          <tr><td class="names"><a href="./tkvars">tkvars(ntcl)</a>            </td><td class="summary">Variables used or set by Tk</td></tr>
          <tr><td class="names"><a href="./tkwait">tkwait(ntcl)</a>            </td><td class="summary">Wait for variable to change or window to be destroyed</td></tr>
          <tr><td class="names"><a href="./tm">tm(ntcl)</a>                </td><td class="summary">Facilities for locating and loading of Tcl Modules</td></tr>
          <tr><td class="names"><a href="./tooltip">tooltip(n)</a>              </td><td class="summary">Tooltip management</td></tr>
          <tr><td class="names"><a href="./toplevel">toplevel(ntcl)</a>          </td><td class="summary">Create and manipulate toplevel widgets</td></tr>
          <tr><td class="names"><a href="./tpool">tpool(n)</a>                </td><td class="summary">Part of the Tcl threading extension implementing pools of worker threads</td></tr>
          <tr><td class="names"><a href="./tqueue">tqueue(n)</a>, <a href="./transfer::copy::queue">transfer::copy::queue(n)</a></td><td class="summary">Queued transfers</td></tr>
          <tr><td class="names"><a href="./trace">trace(ntcl)</a>             </td><td class="summary">Monitor variable accesses, command usages and command executions</td></tr>
          <tr><td class="names"><a href="./transform">transform(n)</a>            </td><td class="summary">Tcl level transformations</td></tr>
          <tr><td class="names"><a href="./transmitter">transmitter(n)</a>, <a href="./transfer::transmitter">transfer::transmitter(n)</a></td><td class="summary">Data source</td></tr>
          <tr><td class="names"><a href="./traverse">traverse(n)</a>, <a href="./fileutil_traverse">fileutil_traverse(n)</a></td><td class="summary">Iterative directory traversal</td></tr>
          <tr><td class="names"><a href="./treeql">treeql(n)</a>               </td><td class="summary">Query tree objects</td></tr>
          <tr><td class="names"><a href="./trf">trf(n)</a>, <a href="./trf-intro">trf-intro(n)</a>    </td><td class="summary">Introduction to Trf</td></tr>
          <tr><td class="names"><a href="./trim">trim(n)</a>, <a href="./textutil::trim">textutil::trim(n)</a></td><td class="summary">Procedures to trim strings</td></tr>
          <tr><td class="names"><a href="./tsv">tsv(n)</a>                  </td><td class="summary">Part of the Tcl threading extension allowing script level manipulation of data shared between threads</td></tr>
          <tr><td class="names"><a href="./ttk::button">ttk::button(ntcl)</a>       </td><td class="summary">Widget that issues a command when pressed</td></tr>
          <tr><td class="names"><a href="./ttk::checkbutton">ttk::checkbutton(ntcl)</a>  </td><td class="summary">On/off widget</td></tr>
          <tr><td class="names"><a href="./ttk::combobox">ttk::combobox(ntcl)</a>     </td><td class="summary">text field with popdown selection list</td></tr>
          <tr><td class="names"><a href="./ttk::entry">ttk::entry(ntcl)</a>        </td><td class="summary">Editable text field widget</td></tr>
          <tr><td class="names"><a href="./ttk::frame">ttk::frame(ntcl)</a>        </td><td class="summary">Simple container widget</td></tr>
          <tr><td class="names"><a href="./ttk::intro">ttk::intro(ntcl)</a>        </td><td class="summary">Introduction to the Tk theme engine</td></tr>
          <tr><td class="names"><a href="./ttk::label">ttk::label(ntcl)</a>        </td><td class="summary">Display a text string and/or image</td></tr>
          <tr><td class="names"><a href="./ttk::labelframe">ttk::labelframe(ntcl)</a>   </td><td class="summary">Container widget with optional label</td></tr>
          <tr><td class="names"><a href="./ttk::menubutton">ttk::menubutton(ntcl)</a>   </td><td class="summary">Widget that pops down a menu when pressed</td></tr>
          <tr><td class="names"><a href="./ttk::notebook">ttk::notebook(ntcl)</a>     </td><td class="summary">Multi-paned container widget</td></tr>
          <tr><td class="names"><a href="./ttk::panedwindow">ttk::panedwindow(ntcl)</a>  </td><td class="summary">Multi-pane container window</td></tr>
          <tr><td class="names"><a href="./ttk::progressbar">ttk::progressbar(ntcl)</a>  </td><td class="summary">Provide progress feedback</td></tr>
          <tr><td class="names"><a href="./ttk::radiobutton">ttk::radiobutton(ntcl)</a>  </td><td class="summary">Mutually exclusive option widget</td></tr>
          <tr><td class="names"><a href="./ttk::scale">ttk::scale(ntcl)</a>        </td><td class="summary">Create and manipulate a scale widget</td></tr>
          <tr><td class="names"><a href="./ttk::scrollbar">ttk::scrollbar(ntcl)</a>    </td><td class="summary">Control the viewport of a scrollable widget</td></tr>
          <tr><td class="names"><a href="./ttk::separator">ttk::separator(ntcl)</a>    </td><td class="summary">Separator bar</td></tr>
          <tr><td class="names"><a href="./ttk::sizegrip">ttk::sizegrip(ntcl)</a>     </td><td class="summary">Bottom-right corner resize widget</td></tr>
          <tr><td class="names"><a href="./ttk::spinbox">ttk::spinbox(ntcl)</a>      </td><td class="summary">Selecting text field widget</td></tr>
          <tr><td class="names"><a href="./ttk::style">ttk::style(ntcl)</a>        </td><td class="summary">Manipulate style database</td></tr>
          <tr><td class="names"><a href="./ttk::treeview">ttk::treeview(ntcl)</a>     </td><td class="summary">hierarchical multicolumn data display widget</td></tr>
          <tr><td class="names"><a href="./ttk::widget">ttk::widget(ntcl)</a>       </td><td class="summary">Standard options and commands supported by Tk themed widgets</td></tr>
          <tr><td class="names"><a href="./ttk_image">ttk_image(ntcl)</a>         </td><td class="summary">Define an element based on an image</td></tr>
          <tr><td class="names"><a href="./ttk_vsapi">ttk_vsapi(ntcl)</a>         </td><td class="summary">Define a Microsoft Visual Styles element</td></tr>
          <tr><td class="names"><a href="./ttrace">ttrace(n)</a>               </td><td class="summary">Trace-based interpreter initialization</td></tr>
          <tr><td class="names"><a href="./uevent">uevent(n)</a>               </td><td class="summary">User events</td></tr>
          <tr><td class="names"><a href="./uevent_onidle">uevent_onidle(n)</a>, <a href="./uevent::onidle">uevent::onidle(n)</a></td><td class="summary">Request merging and deferal to idle time</td></tr>
          <tr><td class="names"><a href="./unicode">unicode(n)</a>              </td><td class="summary">Implementation of Unicode normalization</td></tr>
          <tr><td class="names"><a href="./unicode_data">unicode_data(n)</a>, <a href="./unicode::data">unicode::data(n)</a></td><td class="summary">unicode data tables, generated, internal</td></tr>
          <tr><td class="names"><a href="./units">units(n)</a>                </td><td class="summary">unit conversion</td></tr>
          <tr><td class="names"><a href="./unknown">unknown(ntcl)</a>           </td><td class="summary">Handle attempts to use non-existent commands</td></tr>
          <tr><td class="names"><a href="./unload">unload(ntcl)</a>            </td><td class="summary">Unload machine code</td></tr>
          <tr><td class="names"><a href="./unset">unset(ntcl)</a>             </td><td class="summary">Delete variables</td></tr>
          <tr><td class="names"><a href="./unstack">unstack(n)</a>              </td><td class="summary">Unstacking channels</td></tr>
          <tr><td class="names"><a href="./update">update(ntcl)</a>            </td><td class="summary">Process pending events and idle callbacks</td></tr>
          <tr><td class="names"><a href="./uplevel">uplevel(ntcl)</a>           </td><td class="summary">Execute a script in a different stack frame</td></tr>
          <tr><td class="names"><a href="./upvar">upvar(ntcl)</a>             </td><td class="summary">Create link to variable in a different stack frame</td></tr>
          <tr><td class="names"><a href="./uri">uri(n)</a>                  </td><td class="summary">URI utilities</td></tr>
          <tr><td class="names"><a href="./urn-scheme">urn-scheme(n)</a>, <a href="./uri_urn">uri_urn(n)</a></td><td class="summary">URI utilities, URN scheme</td></tr>
          <tr><td class="names"><a href="./usual">usual(n)</a>                </td><td class="summary">access default option-handling commands for a mega-widget component</td></tr>
          <tr><td class="names"><a href="./uuencode">uuencode(n)</a>             </td><td class="summary">UU-encode/decode binary data</td></tr>
          <tr><td class="names"><a href="./uuid">uuid(n)</a>                 </td><td class="summary">UUID generation and comparison</td></tr>
          <tr><td class="names"><a href="./variable">variable(ntcl)</a>          </td><td class="summary">create and initialize a namespace variable</td></tr>
          <tr><td class="names"><a href="./vfs">vfs(n)</a>                  </td><td class="summary">Filesystem management in Tcl</td></tr>
          <tr><td class="names"><a href="./vfs-filesystems">vfs-filesystems(n)</a>      </td><td class="summary">Filesystems provided by tclvfs</td></tr>
          <tr><td class="names"><a href="./vfs-fsapi">vfs-fsapi(n)</a>            </td><td class="summary">API for the implementation of a filesystem in Tcl</td></tr>
          <tr><td class="names"><a href="./vwait">vwait(ntcl)</a>             </td><td class="summary">Process events until a variable is written</td></tr>
          <tr><td class="names"><a href="./while">while(ntcl)</a>             </td><td class="summary">Execute script repeatedly as long as a condition is met</td></tr>
          <tr><td class="names"><a href="./widget">widget(n)</a>               </td><td class="summary">Megawidget package</td></tr>
          <tr><td class="names"><a href="./widget_calendar">widget_calendar(n)</a>      </td><td class="summary">widget::calendar Megawidget</td></tr>
          <tr><td class="names"><a href="./widget_toolbar">widget_toolbar(n)</a>       </td><td class="summary">widget::toolbar Megawidget</td></tr>
          <tr><td class="names"><a href="./winfo">winfo(ntcl)</a>             </td><td class="summary">Return window-related information</td></tr>
          <tr><td class="names"><a href="./wip">wip(n)</a>                  </td><td class="summary">Word Interpreter</td></tr>
          <tr><td class="names"><a href="./wm">wm(ntcl)</a>                </td><td class="summary">Communicate with window manager</td></tr>
          <tr><td class="names"><a href="./xsxp">xsxp(n)</a>                 </td><td class="summary">eXtremely Simple Xml Parser</td></tr>
          <tr><td class="names"><a href="./yaml">yaml(n)</a>                 </td><td class="summary">YAML Format Encoder/Decoder</td></tr>
          <tr><td class="names"><a href="./yencode">yencode(n)</a>              </td><td class="summary">Y-encode/decode binary data</td></tr>
          <tr><td class="names"><a href="./zero">zero(n)</a>                 </td><td class="summary">Create and manipulate zero channels</td></tr>
          <tr><td class="names"><a href="./zip">zip(n)</a>                  </td><td class="summary">Data compression "zip"</td></tr>
        </tbody>
      </table>
    </main>
  </body>
</html>
